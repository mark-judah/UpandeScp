[
 {
  "breadcrumbs": null,
  "content_type": "HTML",
  "context_script": "",
  "css": "/*.navbar.navbar-light {*/\n/*  display: none !important;*/\n/*}*/\n.web-footer {\n  display: none !important;\n}",
  "docstatus": 0,
  "doctype": "Web Page",
  "dynamic_route": 1,
  "dynamic_template": 0,
  "enable_comments": 0,
  "end_date": null,
  "full_width": 1,
  "header": "",
  "insert_style": 1,
  "javascript": "document.addEventListener('DOMContentLoaded', function() {\n  const homeLink = document.querySelector('.navbar-brand');\n  if (homeLink) {\n    homeLink.href = \"https://kaitet-group-staging.upande.com/app/scouting-%26-crop-protection\";\n  }\n});",
  "main_section": null,
  "main_section_html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Scouting Coverage Map</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script>\n        tailwind.config = { prefix: \"tw-\" };\n    </script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        html,\n        body {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            overflow-x: hidden;\n        }\n\n        #map-page {\n            height: 100vh;\n            width: 100%;\n            position: relative;\n        }\n\n        #map-container,\n        #map {\n            height: 100%;\n            width: 100%;\n        }\n\n        #date-filter-container {\n            position: absolute;\n            top: 1rem;\n            right: 1rem;\n            z-index: 1001;\n            background: white;\n            padding: 0.5rem 1rem;\n            border-radius: 0.5rem;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);\n            display: flex;\n            align-items: center;\n        }\n\n        #date-filter-container input[type=\"date\"] {\n            border: 1px solid #ccc;\n            padding: 0.25rem 0.5rem;\n            border-radius: 0.25rem;\n            font-size: 0.875rem;\n        }\n\n        #scout-legend {\n            position: absolute;\n            bottom: 5rem;\n            left: 1rem;\n            z-index: 1000;\n            background: white;\n            padding: 1rem;\n            border-radius: 0.5rem;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);\n            max-height: 50%;\n            overflow-y: auto;\n        }\n\n        #scout-legend label {\n            display: flex;\n            align-items: center;\n            cursor: pointer;\n            margin-bottom: 0.5rem;\n            font-size: 0.875rem;\n        }\n\n        .line-id-label {\n            font-family: sans-serif;\n            pointer-events: none;\n        }\n\n        .leaflet-top.leaflet-right {\n            margin-top: 4rem !important;\n        }\n    </style>\n</head>\n\n<body class=\"tw-bg-white tw-font-sans\">\n    <div class=\"main-container\">\n        <div id=\"map-page\" class=\"tw-w-full tw-h-full tw-p-0 tw-flex tw-flex-col\">\n            <div id=\"date-filter-container\" class=\"tw-flex tw-items-center tw-space-x-2\">\n                <label for=\"scout-date-picker\" class=\"tw-text-sm tw-font-medium\">Date:</label>\n                <input type=\"date\" id=\"scout-date-picker\" class=\"tw-text-sm\" />\n            </div>\n            <div id=\"scout-legend\" class=\"tw-bg-white tw-p-4 tw-rounded tw-shadow tw-space-y-2 tw-max-w-xs\">\n                <p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Scout Coverage</p>\n            </div>\n            <div id=\"map-container\" class=\"tw-w-full tw-flex-grow\">\n                <div id=\"map\" class=\"tw-w-full tw-h-full\"></div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-providers/1.13.0/leaflet-providers.min.js\"></script>\n    <script src=\"https://unpkg.com/@turf/turf@6/turf.min.js\"></script>\n    <script src=\"https://unpkg.com/protomaps-leaflet@5.0.0/dist/protomaps-leaflet.js\"></script>\n    <script src=\"/assets/frappe/js/frappe-web.min.js\"></script>\n\n    <script>\n        window.onload = function () {\n            /* ---------------- 1. Globals ---------------- */\n            window.map = null;\n            let mapInitialized = false;\n            window.zoneLayer = null;\n            window.lineIdLabels = null;\n            window.scoutLayers = {};\n            window.scoutedBedOverlay = null;\n            let protomapsLayer = null;\n            let layersControl = null;\n            let darkFlavor = false;\n            window.lastScoutingData = null;\n            window.allLatLngs = [];\n            const palette = ['#ef4444', '#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#06b6d4', '#f43f5e', '#22c55e'];\n\n            /* ---------------- 2. Helpers ---------------- */\n            const generateScoutColors = (data) => {\n                const scouts = (data.scouting_entries || []).map(i => i.scouts_name).filter(Boolean);\n                const unique = new Set(scouts);\n                const colors = {};\n                let idx = 0;\n                unique.forEach(name => {\n                    colors[name] = palette[idx % palette.length];\n                    idx++;\n                });\n                return colors;\n            };\n\n            const getGeoJsonCentroid = (geojson) => {\n                try {\n                    const feature = geojson.features[0];\n                    if (!feature) return null;\n                    if (feature.geometry && feature.geometry.coordinates) {\n                        const centroid = turf.centroid(feature);\n                        const [lon, lat] = centroid.geometry.coordinates;\n                        return [lat, lon];\n                    }\n                } catch (e) {\n                    console.error(\"Error calculating centroid:\", e);\n                }\n                return null;\n            };\n\n            // UPDATED HELPERS: to ensure smooth line skipping\n            function getEdgeMidpoint(coords) {\n                try {\n                    const pts = coords.map(c => [c[1], c[0]]);\n                    let maxDist = 0, pair = [];\n                    for (let i = 0; i < pts.length; i++) {\n                        const p1 = pts[i];\n                        const p2 = pts[(i + 1) % pts.length];\n                        const dist = turf.distance(turf.point([p1[1], p1[0]]), turf.point([p2[1], p2[0]]));\n                        if (dist > maxDist) {\n                            maxDist = dist;\n                            pair = [p1, p2];\n                        }\n                    }\n                    return [(pair[0][0] + pair[1][0]) / 2, (pair[0][1] + pair[1][1]) / 2];\n                } catch {\n                    return coords[0] ? [coords[0][1], coords[0][0]] : null;\n                }\n            }\n\n            // MODIFIED: Now generates a straight line for smoother skipping.\n            function generateWalkPath(start, end) {\n                if (!start || !end) return [];\n                return [start, end];\n            }\n\n            /* ---------------- 3. Map Init ---------------- */\n            const initializeMap = () => {\n                if (mapInitialized) return;\n                window.map = L.map('map', { zoomSnap: 0.1, zoomDelta: 0.1, maxZoom: 22.4, zoomControl: false });\n                mapInitialized = true;\n                renderBaseLayers();\n                map.setView([0.0685, 35.7476], 18);\n\n                const picker = document.getElementById('scout-date-picker');\n                const today = new Date().toISOString().slice(0, 10);\n                picker.value = today;\n                fetchAllData(today);\n                picker.addEventListener('change', e => fetchAllData(e.target.value));\n            };\n\n            const renderBaseLayers = () => {\n                const googleSat = L.tileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', { maxZoom: 25 });\n                const pmtilesUrl = 'https://res.cloudinary.com/dorft5vxy/raw/upload/v1757410567/eldama-ravine_gdtrsv.pmtiles';\n                protomapsLayer = protomapsL.leafletLayer({\n                    url: pmtilesUrl,\n                    flavor: \"light\",\n                    attribution: \"© Protomaps © OpenStreetMap\"\n                });\n                protomapsLayer.addTo(map);\n                layersControl = L.control.layers({ \"Satellite\": googleSat, \"Protomaps\": protomapsLayer }, {}, { collapsed: false }).addTo(map);\n            };\n\n            const fetchAllData = (date) => {\n                if (window.scoutedBedOverlay) map.removeLayer(window.scoutedBedOverlay);\n                window.scoutLayers = {};\n                document.getElementById('scout-legend').innerHTML = '<p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Scout Coverage</p>';\n                window.allLatLngs = [];\n\n                frappe.call({\n                    method: \"getScoutingAnalysis\",\n                    args: { date },\n                    freeze: true,\n                    callback: (r) => {\n                        if (r.data) {\n                            const allData = r.data;\n                            window.lastScoutingData = allData;\n                            allData.scouting_entries = (allData.scouting_entries || []).filter(e => e.scouts_name);\n                            const scoutColors = generateScoutColors(allData);\n                            window.scoutedBedOverlay = L.layerGroup().addTo(map);\n\n                            renderZones(allData);\n                            renderScoutFlowLines(allData.scouting_entries || [], allData.all_zones_geojson || [], scoutColors);\n                            renderScoutedBeds(allData.scouting_entries || [], allData.all_zones_geojson || [], scoutColors);\n                            renderScoutLegend(scoutColors);\n\n                            if (window.allLatLngs.length) {\n                                map.fitBounds(L.latLngBounds(window.allLatLngs), { padding: [50, 50] });\n                                map.setZoom(Math.max(18, map.getZoom()));\n                            }\n                        } else {\n                            document.getElementById('scout-legend').innerHTML = '<p>No Scout Data</p>';\n                        }\n                    }\n                });\n            };\n\n            /* ---------------- 4. Scouted Beds (Modified) ---------------- */\n            function renderScoutedBeds(scoutingData, zonesGeojson, scoutColors) {\n                const zoneScoutMap = {};\n                scoutingData.forEach(entry => {\n                    if (!zoneScoutMap[entry.zone]) {\n                        zoneScoutMap[entry.zone] = { scout: entry.scouts_name, count: 0, latestEntry: null };\n                    }\n                    zoneScoutMap[entry.zone].count++;\n                    if (!zoneScoutMap[entry.zone].latestEntry || entry.creation > zoneScoutMap[entry.zone].latestEntry) {\n                        zoneScoutMap[entry.zone].latestEntry = entry.creation;\n                    }\n                    if (!window.scoutLayers[entry.scouts_name]) window.scoutLayers[entry.scouts_name] = L.layerGroup();\n                });\n\n                const zoneMap = new Map((zonesGeojson || []).map(z => [z.name, z]));\n                Object.entries(zoneScoutMap).forEach(([zoneName, info]) => {\n                    const zone = zoneMap.get(zoneName);\n                    if (!zone) return;\n                    try {\n                        const geo = JSON.parse(zone.raw_geojson);\n                        const coords = geo.features[0].geometry.coordinates.map(c => [c[1], c[0]]);\n                        const color = scoutColors[info.scout];\n                        \n                        // FIX: Set weight to 0 to remove the thick line on each bed\n                        const line = L.polyline(coords, { color, weight: 0, opacity: 1, pane: 'overlayPane' });\n                        \n                        line.bindTooltip(`<div class='tw-text-xs'><strong>${zone.name}</strong><br>${info.scout}<br>${info.count} entries</div>`);\n                        window.scoutLayers[info.scout].addLayer(line);\n                        window.allLatLngs.push(...coords);\n                        if (!window.scoutedBedOverlay.hasLayer(window.scoutLayers[info.scout])) window.scoutedBedOverlay.addLayer(window.scoutLayers[info.scout]);\n                    } catch { }\n                });\n            }\n\n            /* ---------------- 5. Scout Walking Paths (Modified) ---------------- */\n            function renderScoutFlowLines(scoutingEntries, zonesGeojson, scoutColors) {\n                const zoneMap = new Map((zonesGeojson || []).map(z => [z.name, z]));\n                const movement = new Map();\n\n                scoutingEntries.sort((a, b) => new Date(a.creation) - new Date(b.creation))\n                    .forEach(entry => {\n                        const zone = zoneMap.get(entry.zone);\n                        if (!zone) return;\n                        try {\n                            const geo = JSON.parse(zone.raw_geojson);\n                            const centroid = getGeoJsonCentroid(geo);\n                            if (centroid) {\n                                if (!movement.has(entry.scouts_name)) movement.set(entry.scouts_name, []);\n                                const path = movement.get(entry.scouts_name);\n                                const last = path.slice(-1)[0];\n                                if (!last || last.zoneName !== entry.zone) {\n                                    path.push({ zoneName: entry.zone, coords: geo.features[0].geometry.coordinates, centroid });\n                                }\n                            }\n                        } catch (e) { console.warn(\"flow error\", e); }\n                    });\n\n                movement.forEach((visits, scoutName) => {\n                    const color = scoutColors[scoutName] || palette[0];\n                    if (!window.scoutLayers[scoutName]) window.scoutLayers[scoutName] = L.layerGroup();\n                    const group = window.scoutLayers[scoutName];\n                    for (let i = 0; i < visits.length - 1; i++) {\n                        const start = getEdgeMidpoint(visits[i].coords);\n                        const end = getEdgeMidpoint(visits[i + 1].coords);\n                        \n                        // Using the updated generateWalkPath which now produces a straight line\n                        const pathCoords = generateWalkPath(start, end);\n                        \n                        const line = L.polyline(pathCoords, {\n                            color,\n                            weight: 2.5,\n                            opacity: 0.8,\n                            smoothFactor: 1.2,\n                            lineJoin: 'round'\n                        });\n                        line.bindTooltip(`<div class='tw-text-xs'><strong>${scoutName}</strong><br>${visits[i].zoneName} → ${visits[i + 1].zoneName}</div>`);\n                        group.addLayer(line);\n                    }\n                });\n            }\n\n            /* ---------------- 6. Legend ---------------- */\n            const renderScoutLegend = (scoutColors) => {\n                const legend = document.getElementById('scout-legend');\n                legend.innerHTML = '<p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Show Scouts</p>';\n                Object.keys(window.scoutLayers).forEach(name => {\n                    const color = scoutColors[name];\n                    const item = document.createElement('div');\n                    item.className = 'tw-flex tw-items-center tw-space-x-2';\n                    item.innerHTML = `\n                        <input type=\"checkbox\" data-scout=\"${name}\" checked class=\"tw-h-4 tw-w-4 tw-rounded tw-text-blue-600\" />\n                        <span class=\"tw-w-3 tw-h-3 tw-rounded-full\" style=\"background:${color}\"></span>\n                        <label class=\"tw-text-sm\">${name}</label>`;\n                    const checkbox = item.querySelector('input');\n                    checkbox.addEventListener('change', e => {\n                        const scoutName = e.target.dataset.scout;\n                        const layer = window.scoutLayers[scoutName];\n                        if (layer) {\n                            if (e.target.checked) window.scoutedBedOverlay.addLayer(layer);\n                            else window.scoutedBedOverlay.removeLayer(layer);\n                        }\n                    });\n                    legend.appendChild(item);\n                });\n            };\n\n            /* ---------------- 7. Zones ---------------- */\n            const renderZones = (data) => {\n                if (window.zoneLayer) map.removeLayer(window.zoneLayer);\n                if (window.lineIdLabels) { map.removeLayer(window.lineIdLabels); window.lineIdLabels = null; }\n                const lines = {};\n                (data.all_zones_geojson || []).forEach(zone => {\n                    try {\n                        const geo = JSON.parse(zone.raw_geojson);\n                        const ghName = zone.name.split(\" - \")[0];\n                        if (geo.features) {\n                            geo.features.forEach(f => {\n                                const lid = f.properties.line_id;\n                                const key = `${ghName}_line_${lid}`;\n                                f.properties.zone_name = zone.name;\n                                if (!lines[key]) lines[key] = [];\n                                lines[key].push(f);\n                            });\n                        }\n                    } catch { }\n                });\n\n                window.lineIdLabels = L.layerGroup().addTo(map);\n                Object.keys(lines).forEach(key => {\n                    const feats = lines[key];\n                    if (feats.length > 0) {\n                        feats.sort((a, b) => a.properties.zone_id - b.properties.zone_id);\n                        const coords = feats.flatMap(f => f.geometry.coordinates);\n                        const lid = feats[0].properties.line_id;\n                        const isOdd = parseInt(lid) % 2 !== 0;\n                        const markerPoint = isOdd ? coords[0] : coords[coords.length - 1];\n                        const lbl = L.marker([markerPoint[1], markerPoint[0]], {\n                            icon: L.divIcon({\n                                className: 'line-id-label',\n                                html: `<div class=\"${darkFlavor ? 'tw-text-white' : 'tw-text-black'} tw-text-[7px]\" style=\"transform:rotate(45deg)\">${lid}</div>`,\n                                iconSize: [20, 10],\n                                iconAnchor: [0, 0]\n                            })\n                        });\n                        window.lineIdLabels.addLayer(lbl);\n                    }\n                });\n\n                const allFeats = { type: \"FeatureCollection\", features: Object.values(lines).flat() };\n                window.zoneLayer = L.geoJSON(allFeats, {\n                    style: { color: darkFlavor ? '#fff' : '#000', weight: 0.6, opacity: 0.8 },\n                    onEachFeature: (f, layer) => {\n                        if (f.properties?.zone_name) {\n                            const parts = f.properties.zone_name.split(\" - \");\n                            const html = parts.length >= 4\n                                ? `<div class='tw-text-xs'><strong>${parts[0]}</strong><br>${parts[1]}<br>${parts[2]}<br>${parts[3]}</div>`\n                                : f.properties.zone_name;\n                            layer.bindTooltip(html);\n                        }\n                    }\n                });\n                if (map.getZoom() >= 15) window.zoneLayer.addTo(map);\n            };\n\n            initializeMap();\n        };\n    </script>\n</body>\n\n</html>",
  "main_section_md": null,
  "meta_description": null,
  "meta_image": null,
  "meta_title": null,
  "modified": "2025-10-11 01:19:32.237275",
  "module": "Upande Scp",
  "name": "scouting-analysis",
  "page_blocks": [],
  "published": 1,
  "route": "scouts-map",
  "show_sidebar": 0,
  "show_title": 0,
  "slideshow": null,
  "start_date": null,
  "text_align": "Left",
  "title": "Scouts Map",
  "website_sidebar": "Scouting Sidebar"
 },
 {
  "breadcrumbs": null,
  "content_type": "HTML",
  "context_script": null,
  "css": "/*.navbar.navbar-light {*/\n/*  display: none !important;*/\n/*}*/\n.web-footer {\n  display: none !important;\n}",
  "docstatus": 0,
  "doctype": "Web Page",
  "dynamic_route": 0,
  "dynamic_template": 0,
  "enable_comments": 0,
  "end_date": null,
  "full_width": 1,
  "header": null,
  "insert_style": 1,
  "javascript": "document.addEventListener('DOMContentLoaded', function() {\n  const homeLink = document.querySelector('.navbar-brand');\n  if (homeLink) {\n    homeLink.href = \"https://kaitet-group-staging.upande.com/app/scouting-%26-crop-protection\";\n  }\n});\n//hide other links\nconst navItems = document.getElementsByClassName('nav-item');\nconst itemsToHide = [\"Scouts Map\", \"Observations Map\", \"Variety Map\"];\n\nfor (let i = 0; i < navItems.length; i++) {\n  const currentItemText = navItems[i].textContent.trim();\n\n  if (itemsToHide.includes(currentItemText)) {\n    navItems[i].style.display = 'none';\n  }\n}",
  "main_section": null,
  "main_section_html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New Application Floor Plan</title>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n  <script>\n    tailwind.config = {\n      prefix: \"tw-\",\n    };\n  </script>\n  <style>\n    #heatmap-grid-wrapper {\n      display: grid;\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr;\n      border: 1px solid #e0e0e0;\n      width: 100%;\n      margin: auto;\n      max-width: 100%;\n      overflow: auto;\n    }\n\n    #x-axis-labels {\n      grid-column: 2 / 3;\n      grid-row: 1 / 2;\n      display: grid;\n      grid-template-columns: repeat(var(--zones-per-bed), minmax(35px, 1fr));\n      gap: 0;\n      padding-bottom: 3px;\n      text-align: center;\n      font-size: 0.6rem;\n      color: #666;\n      font-weight: 500;\n    }\n\n    #y-axis-labels {\n      grid-column: 1 / 2;\n      grid-row: 2 / 3;\n      display: grid;\n      grid-template-rows: repeat(var(--num-beds), minmax(2px, 1fr));\n      gap: 0;\n      padding-right: 3px;\n      text-align: right;\n      font-size: 0.6rem;\n      color: #666;\n      font-weight: 500;\n    }\n\n    #main-grid {\n      grid-column: 2 / 3;\n      grid-row: 2 / 3;\n      display: grid;\n      grid-template-columns: repeat(var(--zones-per-bed), minmax(35px, 1fr));\n      grid-template-rows: repeat(var(--num-beds), minmax(10px, auto));\n      gap: 0;\n      border: 1px solid #f0f0f0;\n    }\n\n    .tw-grid-cell {\n      position: relative;\n      width: auto;\n      background-color: #f8f9fa;\n      cursor: pointer;\n      transition: background-color 0.1s ease;\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: column;\n      justify-content: flex-start;\n      align-items: stretch;\n      gap: 1px;\n      min-height: 10px;\n      padding: 1px;\n    }\n\n    .tw-pest-line {\n      padding: 1px;\n      font-size: 0.75rem;\n      font-weight: 500;\n      color: #fff;\n      border-radius: 4px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      text-align: center;\n      width: 100%;\n      box-sizing: border-box;\n      border: 1px solid rgba(255, 255, 255, 0.2);\n    }\n\n    .tw-grid-cell.tw-threshold-high {\n      border: 3px solid #dc3545 !important;\n      box-sizing: content-box;\n    }\n\n    .tw-grid-cell.tw-threshold-moderate {\n      border: 3px solid #ffc107 !important;\n      box-sizing: content-box;\n    }\n\n    .tw-grid-cell.tw-threshold-low {\n      border: 1px solid #28a745 !important;\n      box-sizing: content-box;\n    }\n\n    .tw-grid-cell.tw-highlight {\n      border: none;\n      background-color: transparent;\n    }\n\n    .tw-grid-cell:hover {\n      outline: 1px solid #888;\n      z-index: 1;\n    }\n\n    .tw-tooltip {\n      position: absolute;\n      background-color: rgba(0, 0, 0, 0.9);\n      color: #fff;\n      padding: 0.3rem 0.6rem;\n      border-radius: 0.25rem;\n      white-space: nowrap;\n      font-size: 10px;\n      opacity: 0;\n      pointer-events: none;\n      transition: opacity 0.2s ease;\n      z-index: 100;\n      bottom: calc(100% + 5px);\n      left: 50%;\n      transform: translateX(-50%);\n    }\n\n    .tw-tooltip::after {\n      content: \"\";\n      position: absolute;\n      top: 100%;\n      left: 50%;\n      margin-left: -5px;\n      border-width: 5px;\n      border-style: solid;\n      border-color: rgba(0, 0, 0, 0.9) transparent transparent transparent;\n    }\n\n    .tw-grid-cell:hover .tw-tooltip {\n      opacity: 1;\n    }\n  </style>\n</head>\n\n<body class=\"tw-bg-gray-100 tw-p-8\">\n  <div class=\"tw-flex tw-space-x-6 tw-p-4\">\n    <div class=\"tw-flex-shrink-0 tw-w-1/3\">\n      <form class=\"tw-w-full tw-bg-white tw-shadow-md tw-rounded-lg tw-p-4 tw-border tw-border-gray-200\">\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"scouting-date\">Date</label>\n          <input type=\"date\" id=\"scouting-date\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\">\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"greenhouse\">Greenhouse</label>\n          <select id=\"greenhouse\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\">\n            <option value=\"\">Select a greenhouse</option>\n            <option value=\"Chepsito GH 06 - KR\">Chepsito GH 06</option>\n            <option value=\"Chepsito GH 07 - KR\">Chepsito GH 07</option>\n            <option value=\"Chepsito GH 08 - KR\">Chepsito GH 08</option>\n            <option value=\"Chepsito GH 09 - KR\">Chepsito GH 09</option>\n            <option value=\"Kapkolia GH 10 - KR\">Kapkolia GH 10</option>\n          </select>\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"variety\">Variety</label>\n          <select id=\"variety\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\">\n            <option value=\"\">Select a variety</option>\n          </select>\n        </div>\n        <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\">Targets</label>\n        <div class=\"tw-mb-4\">\n          <div id=\"targets-container\" class=\"tw-flex tw-flex-wrap tw-gap-x-6 tw-gap-y-2\">\n            <div>\n              <input type=\"checkbox\" id=\"whiteflies\" name=\"targets\" value=\"Whiteflies\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"whiteflies\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Whiteflies</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"thrips\" name=\"targets\" value=\"Thrips\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"thrips\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Thrips</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"spidermites\" name=\"targets\" value=\"Spidermites\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"spidermites\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Spidermites</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"mealybugs\" name=\"targets\" value=\"Mealybugs\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"mealybugs\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Mealybugs</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"caterpillars\" name=\"targets\" value=\"Caterpillars\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"caterpillars\"\n                class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Caterpillars</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"helicoverpa\" name=\"targets\" value=\"Helicoverpa\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"helicoverpa\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Helicoverpa</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"powdery-mildew\" name=\"targets\" value=\"Powdery Mildew\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"powdery-mildew\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Powdery\n                Mildew</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"botrytis\" name=\"targets\" value=\"Botrytis\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"botrytis\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Botrytis</label>\n            </div>\n          </div>\n        </div>\n        <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\">Stages Filter</label>\n        <div class=\"tw-mb-4\">\n          <div id=\"stages-container\" class=\"tw-flex tw-flex-wrap tw-gap-x-6 tw-gap-y-2\">\n            <div>\n              <input type=\"checkbox\" id=\"stage-larvae\" name=\"stages\" value=\"Larvae\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"stage-larvae\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Larvae</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"stage-adult\" name=\"stages\" value=\"Adult\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"stage-adult\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Adult</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"stage-damage\" name=\"stages\" value=\"Damage\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"stage-damage\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Damage</label>\n            </div>\n          </div>\n        </div>\n        <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\">Plant Section</label>\n        <div class=\"tw-mb-4\">\n          <div id=\"plant-section-container\" class=\"tw-flex tw-flex-wrap tw-gap-x-6 tw-gap-y-2\">\n            <div>\n              <input type=\"checkbox\" id=\"section-base\" name=\"plant-sections\" value=\"Base\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"section-base\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Base</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"section-stem\" name=\"plant-sections\" value=\"Stem\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"section-stem\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Stem</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"section-middle\" name=\"plant-sections\" value=\"Middle\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"section-middle\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Middle</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"section-top\" name=\"plant-sections\" value=\"Top\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"section-top\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Top</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"section-buds\" name=\"plant-sections\" value=\"Buds\"\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"section-buds\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Buds</label>\n            </div>\n          </div>\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\">Chemical Requirement</label>\n          <p id=\"threshold-message\" class=\"tw-text-sm tw-text-gray-500 tw-italic tw-mt-2 tw-mb-2 tw-hidden\"></p>\n          <div id=\"threshold-container\">\n            <div>\n              <input type=\"checkbox\" id=\"threshold-low\" name=\"thresholds\" value=\"low\" checked\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"threshold-low\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Low</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"threshold-moderate\" name=\"thresholds\" value=\"moderate\" checked\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"threshold-moderate\"\n                class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">Moderate</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" id=\"threshold-high\" name=\"thresholds\" value=\"high\" checked\n                class=\"tw-w-4 tw-h-4 tw-text-blue-600 tw-border-gray-300 tw-rounded tw-focus:ring-blue-500\" />\n              <label for=\"threshold-high\" class=\"tw-ml-2 tw-text-sm tw-text-gray-700 tw-cursor-pointer\">High</label>\n            </div>\n          </div>\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"spray-type\">Spray Type</label>\n          <select id=\"spray-type\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\">\n            <option value=\"\">Select a spray type</option>\n            <option value=\"Full\">Full</option>\n            <option value=\"Under\">Under</option>\n            <option value=\"Top\">Top</option>\n            <option value=\"Full + Top\">Full + Top</option>\n            <option value=\"Full + Under\">Full + Under</option>\n            <option value=\"Outside\">Outside</option>\n            <option value=\"Drench\">Drench</option>\n          </select>\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"kit\">Kit</label>\n          <select id=\"kit\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\">\n            <option value=\"\">Select a kit</option>\n            <option value=\"Kit A\">Kit A</option>\n            <option value=\"Kit B\">Kit B</option>\n          </select>\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"scope\">Scope</label>\n          <select id=\"scope\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\">\n            <option value=\"\">Select a scope</option>\n            <option value=\"Full Greenhouse\">Full Greenhouse</option>\n            <option value=\"Specific Variety\">Specific Variety</option>\n            <option value=\"Specific Bed(s)\">Specific Bed(s)</option>\n          </select>\n        </div>\n        <div id=\"bed-numbers-container\" class=\"tw-mb-4 tw-hidden\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"bed-numbers\">Bed\n            Numbers</label>\n          <input type=\"text\" id=\"bed-numbers\" name=\"bed-numbers\" placeholder=\"e.g., 1, 3, 5-8, 12\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\" />\n          <small class=\"tw-text-gray-500 tw-italic\">Enter bed numbers or ranges, separated by commas.</small>\n        </div>\n        <div id=\"variety-selection-container\" class=\"tw-mb-4 tw-hidden\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\"\n            for=\"variety-multiselect\">Varieties</label>\n          <select id=\"variety-multiselect\" multiple\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\"></select>\n          <div id=\"selected-varieties-display\" class=\"tw-mt-2 tw-p-2 tw-border tw-rounded tw-bg-gray-100 tw-text-sm\">\n            <p class=\"tw-text-gray-700\">\n              Selected varieties will appear here...\n            </p>\n          </div>\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"area_to_spray\">Area to\n            Spray(Ha)</label>\n          <input type=\"number\" id=\"area_to_spray\" name=\"area_to_spray\" step=\"any\" readonly\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\" />\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"spray-team-select\">Spray\n            Team</label>\n          <select id=\"spray-team-select\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\"></select>\n        </div>\n        <div class=\"tw-mb-4\">\n          <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"bom\">BOM</label>\n          <select id=\"bom\"\n            class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\">\n            <option value=\"\">Select a BOM</option>\n          </select>\n        </div>\n        <div id=\"bom-details-container\" class=\"tw-hidden\">\n          <div class=\"tw-mb-4\">\n            <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"custom_water_ph\">Water\n              PH</label>\n            <input type=\"text\" id=\"custom_water_ph\" name=\"custom_water_ph\"\n              class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\" />\n          </div>\n          <div class=\"tw-mb-4\">\n            <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\" for=\"custom_water_hardness\">Water\n              Hardness</label>\n            <input type=\"text\" id=\"custom_water_hardness\" name=\"custom_water_hardness\"\n              class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\" />\n          </div>\n          <div class=\"tw-mb-4 tw-bg-white tw-border tw-border-gray-200 tw-rounded-lg tw-shadow-sm\">\n            <div class=\"tw-p-4 tw-border-b tw-border-gray-200\">\n              <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700\">Application Rates (Per Ha)</label>\n            </div>\n            <div id=\"bom-chemicals-list\" class=\"tw-max-h-64 tw-overflow-y-auto tw-divide-y tw-divide-gray-200\">\n              <div\n                class=\"tw-grid tw-grid-cols-4 tw-gap-4 tw-px-4 tw-py-2 tw-bg-gray-100 tw-text-xs tw-uppercase tw-font-semibold tw-text-gray-600 tw-border-b tw-border-gray-300\">\n                <div>Chemical</div>\n                <div class=\"tw-text-center\">Qty</div>\n                <div class=\"tw-text-center\">UoM</div>\n                <div class=\"tw-text-right\">Action</div>\n              </div>\n            </div>\n            <div class=\"tw-p-4\">\n              <button type=\"button\" id=\"add-chemical-btn\"\n                class=\"tw-w-full tw-px-4 tw-py-2 tw-bg-black tw-text-white tw-rounded-md tw-transition tw-duration-200 tw-ease-in-out tw-transform tw-hover:scale-105 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-offset-2\">\n                <span class=\"tw-text-lg tw-font-bold\">+</span> Add Chemical\n              </button>\n            </div>\n          </div>\n          <div class=\"tw-mb-4\">\n            <label class=\"tw-block tw-text-sm tw-font-medium tw-text-gray-700 tw-mb-2\"\n              for=\"custom_water_volume\">Volume(Litres/Ha)</label>\n            <input type=\"text\" id=\"custom_water_volume\" name=\"custom_water_volume\"\n              class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-border-gray-300 tw-rounded-md tw-bg-gray-50 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-blue-500 tw-focus:border-transparent\" />\n          </div>\n        </div>\n        <button type=\"submit\" class=\"tw-mt-4 tw-px-4 tw-py-2 tw-bg-black tw-text-white tw-rounded-md\">\n          Create Plan\n        </button>\n      </form>\n    </div>\n    <div class=\"tw-flex tw-flex-col tw-flex-1 tw-min-w-0\">\n      <div class=\"tw-flex-shrink-0\">\n        <div>\n          <div>\n            <h1></h1>\n            <p></p>\n          </div>\n          <div>\n            <span></span>\n          </div>\n        </div>\n      </div>\n      <div class=\"tw-overflow-auto tw-w-full\">\n        <div id=\"heatmap-container\">\n          <p id=\"grid-status-message\" class=\"tw-text-center tw-text-gray-500\">\n            Please select a greenhouse...\n          </p>\n          <div id=\"heatmap-grid-wrapper\" class=\"tw-hidden\">\n            <div id=\"x-axis-labels\"></div>\n            <div id=\"y-axis-labels\"></div>\n            <div id=\"main-grid\"></div>\n          </div>\n        </div>\n      </div>\n      <div id=\"stock-balances-container\" class=\"tw-hidden tw-mt-6\">\n        <div class=\"tw-overflow-x-auto tw-bg-white tw-shadow-sm tw-rounded-md tw-border tw-border-gray-200\">\n          <table\n            class=\"tw-min-w-full tw-text-sm tw-text-gray-800 tw-border tw-border-gray-200 tw-rounded-md tw-table-fixed tw-border-collapse\">\n            <thead class=\"tw-bg-gray-100 tw-uppercase tw-text-xs tw-text-gray-600\">\n              <tr id=\"stock-balance-table-head-row-main\">\n                <th rowspan=\"2\"\n                  class=\"tw-text-left tw-font-medium tw-py-2 tw-px-3 tw-align-top tw-border-r tw-border-gray-200\">\n                  Chemical\n                </th>\n                <th id=\"warehouse-group-header\" class=\"tw-text-center tw-font-medium tw-py-2 tw-px-3 tw-align-top\">\n                </th>\n                <th rowspan=\"2\"\n                  class=\"tw-text-center tw-font-medium tw-py-2 tw-px-3 tw-align-top tw-border-l tw-border-gray-200\">\n                  Source\n                </th>\n                <th rowspan=\"2\"\n                  class=\"tw-text-center tw-font-medium tw-py-2 tw-px-3 tw-align-top tw-border-l tw-border-gray-200\">\n                  Total\n                </th>\n              </tr>\n              <tr id=\"warehouse-headers-row\">\n              </tr>\n            </thead>\n\n            <tbody id=\"stock-balance-table-body\" class=\"tw-divide-y tw-divide-gray-200\">\n              <tr class=\"hover:tw-bg-gray-50\">\n                <td colspan=\"10\" class=\"tw-text-center tw-text-gray-500 tw-py-3 tw-px-3 tw-border tw-border-gray-200\">\n                  No chemicals selected or loading data...\n                </td>\n              </tr>\n            </tbody>\n          </table>\n\n\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div id=\"global-popup-overlay\" class=\"tw-fixed tw-inset-0 tw-bg-black/50 tw-hidden tw-z-50\">\n    <div id=\"global-popup\"\n      class=\"tw-absolute tw-w-64 tw-bg-white tw-border tw-border-gray-300 tw-rounded-lg tw-shadow-2xl\">\n      <div class=\"tw-p-2\">\n        <input type=\"text\" id=\"global-popup-search\" placeholder=\"Search...\"\n          class=\"tw-w-full tw-px-3 tw-py-2 tw-border tw-rounded-md tw-focus:outline-none tw-focus:ring-1 tw-focus:ring-blue-500\">\n      </div>\n      <div id=\"global-popup-content\" class=\"tw-max-h-64 tw-overflow-y-auto tw-divide-y tw-divide-gray-100\">\n      </div>\n    </div>\n  </div>\n\n  <script>\n    document.addEventListener(\"DOMContentLoaded\", () => {\n      // DOM Element Selections\n      const greenhouseSelect = document.getElementById(\"greenhouse\");\n      const varietySelect = document.getElementById(\"variety\");\n      const sprayTypeSelect = document.getElementById(\"spray-type\");\n      const kitSelect = document.getElementById(\"kit\");\n      const scopeSelect = document.getElementById(\"scope\");\n      const bomSelect = document.getElementById(\"bom\");\n      const areaToSprayInput = document.getElementById(\"area_to_spray\");\n      const bedNumbersInput = document.getElementById(\"bed-numbers\");\n      const waterPhInput = document.getElementById(\"custom_water_ph\");\n      const waterHardnessInput = document.getElementById(\n        \"custom_water_hardness\"\n      );\n      const waterVolumeInput = document.getElementById(\"custom_water_volume\");\n      const sprayTeamSelect = document.getElementById(\"spray-team-select\");\n      const varietyMultiSelect = document.getElementById(\n        \"variety-multiselect\"\n      );\n      const selectedVarietiesDisplay = document.getElementById(\n        \"selected-varieties-display\"\n      );\n      const bomChemicalsList = document.getElementById(\"bom-chemicals-list\");\n      const addChemicalBtn = document.getElementById(\"add-chemical-btn\");\n      const mainGrid = document.getElementById(\"main-grid\");\n      const xAxisLabelsContainer = document.getElementById(\"x-axis-labels\");\n      const yAxisLabelsContainer = document.getElementById(\"y-axis-labels\");\n      const heatmapGridWrapper = document.getElementById(\n        \"heatmap-grid-wrapper\"\n      );\n      const statusMessage = document.getElementById(\"grid-status-message\");\n      const thresholdMessage = document.getElementById(\"threshold-message\");\n      const bedNumbersContainer = document.getElementById(\n        \"bed-numbers-container\"\n      );\n      const varietySelectionContainer = document.getElementById(\n        \"variety-selection-container\"\n      );\n      const bomDetailsContainer = document.getElementById(\n        \"bom-details-container\"\n      );\n      const stockBalancesContainer = document.getElementById(\n        \"stock-balances-container\"\n      );\n      const stockBalanceTableBody = document.getElementById(\n        \"stock-balance-table-body\"\n      );\n      const warehouseGroupHeader = document.getElementById(\n        \"warehouse-group-header\"\n      );\n      const warehouseHeadersRow = document.getElementById(\n        \"warehouse-headers-row\"\n      );\n      const targetsContainer = document.getElementById(\"targets-container\");\n      const stagesContainer = document.getElementById(\"stages-container\");\n      const plantSectionContainer = document.getElementById(\n        \"plant-section-container\"\n      );\n      const thresholdContainer = document.getElementById(\n        \"threshold-container\"\n      );\n      const targetsCheckboxes = document.querySelectorAll(\n        'input[name=\"targets\"]'\n      );\n      const stagesCheckboxes = document.querySelectorAll(\n        'input[name=\"stages\"]'\n      );\n      const plantSectionCheckboxes = document.querySelectorAll(\n        'input[name=\"plant-sections\"]'\n      );\n      document.getElementById('global-popup-overlay').addEventListener('click', (e) => {\n        if (e.target.id === 'global-popup-overlay') {\n          document.getElementById('global-popup-overlay').classList.add('tw-hidden');\n        }\n      });\n\n      // Global Data Caches\n      let scoutingDataCache = [];\n      let varietyRequirementsCache = new Map();\n      let dataMapCache = new Map();\n      let bomsDataCache = [];\n      let bomItemsCache = [];\n      let allChemicalsCache = [];\n      let custom_scope_value = \"\";\n      let bedDataCache = [];\n      let teamDataCache = [];\n      const sourceWarehouseCache = {};\n      let chemicalUomCache = {};\n\n      // Utility Functions\n      const parseBedNumber = (bedString) => {\n        const bedMatch = bedString.match(/Bed (\\d+)/);\n        return bedMatch ? parseInt(bedMatch[1]) : null;\n      };\n\n      const getZoneNumber = (zoneData) => {\n        if (typeof zoneData === \"number\") return zoneData;\n        if (typeof zoneData === \"string\") {\n          const zoneMatch = zoneData.match(/Zone (\\d+)/);\n          if (zoneMatch) return parseInt(zoneMatch[1]);\n        }\n        return null;\n      };\n\n      const findMaxDimensions = (data) => {\n        let maxBed = 0;\n        let maxZone = 0;\n        data.forEach((entry) => {\n          const bedNum = parseBedNumber(entry.bed);\n          if (bedNum > maxBed) maxBed = bedNum;\n          const zoneNum = getZoneNumber(entry.zone);\n          if (zoneNum > maxZone) maxZone = zoneNum;\n        });\n        return { maxBed, maxZone };\n      };\n\n      const getActivePests = () => {\n        const activePests = [];\n        targetsContainer\n          .querySelectorAll('input[type=\"checkbox\"]:checked')\n          .forEach((checkbox) => {\n            activePests.push(checkbox.value);\n          });\n        return activePests;\n      };\n\n      const getActiveStages = () => {\n        const activeStages = [];\n        stagesContainer\n          .querySelectorAll('input[type=\"checkbox\"]:checked')\n          .forEach((checkbox) => {\n            activeStages.push(checkbox.value);\n          });\n        return activeStages;\n      };\n\n      const getActivePlantSections = () => {\n        const activeSections = [];\n        plantSectionContainer\n          .querySelectorAll('input[type=\"checkbox\"]:checked')\n          .forEach((checkbox) => {\n            activeSections.push(checkbox.value);\n          });\n        return activeSections;\n      };\n\n      const getActiveRequirements = () => {\n        const activeRequirements = [];\n        thresholdContainer\n          .querySelectorAll('input[type=\"checkbox\"]:checked')\n          .forEach((checkbox) => {\n            activeRequirements.push(checkbox.value);\n          });\n        return activeRequirements;\n      };\n\n\n\n      const showGlobalPopup = (inputElement, dataCache, dataType) => {\n        const popupOverlay = document.getElementById('global-popup-overlay');\n        const popup = document.getElementById('global-popup');\n        const contentDiv = document.getElementById('global-popup-content');\n        const searchInput = document.getElementById('global-popup-search');\n\n        popup.dataset.targetInputId = inputElement.id || (inputElement.id = `input-${Date.now()}-${Math.random()}`);\n        popup.dataset.dataType = dataType;\n\n        const inputRect = inputElement.getBoundingClientRect();\n        const popupWidth = 256;\n        const POPUP_HEIGHT = 300;\n\n        let topPosition = inputRect.bottom + 5;\n\n        const spaceBelow = window.innerHeight - inputRect.bottom;\n\n        if (spaceBelow < POPUP_HEIGHT && inputRect.top > POPUP_HEIGHT) {\n          topPosition = inputRect.top - POPUP_HEIGHT - 5;\n        }\n\n        popup.style.top = `${topPosition}px`;\n        popup.style.left = `${inputRect.left}px`;\n\n        if (inputRect.left + popupWidth > window.innerWidth) {\n          popup.style.left = `${inputRect.right - popupWidth}px`;\n        }\n\n        contentDiv.innerHTML = '';\n        dataCache.forEach((item) => {\n          const option = document.createElement(\"a\");\n          option.href = \"#\";\n          option.textContent = item;\n          option.className = \"tw-block tw-px-3 tw-py-2 hover:tw-bg-gray-100\";\n          option.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            inputElement.value = item;\n            popupOverlay.classList.add('tw-hidden');\n            searchInput.value = '';\n            updateStockBalancesFromUserInput();\n          });\n          contentDiv.appendChild(option);\n        });\n\n        searchInput.value = inputElement.value;\n\n        searchInput.oninput = () => {\n          filterGlobalPopup();\n        };\n\n        popupOverlay.classList.remove('tw-hidden');\n        filterGlobalPopup();\n        searchInput.focus();\n      };\n\n      const filterGlobalPopup = () => {\n        const contentDiv = document.getElementById('global-popup-content');\n        const searchInput = document.getElementById('global-popup-search');\n\n        const filterText = searchInput.value.toUpperCase();\n\n        Array.from(contentDiv.children).forEach(option => {\n          const itemText = option.textContent.toUpperCase();\n\n          if (itemText.includes(filterText)) {\n            option.style.display = 'block';\n          } else {\n            option.style.display = 'none';\n          }\n        });\n      };\n\n      const updateStockBalancesFromUserInput = () => {\n        const userChemicalObjects = getFinalChemicals();\n        const userChemicalNames = userChemicalObjects.map(item => item.chemical);\n\n        fetchAndRenderStockBalances(userChemicalNames);\n      };\n\n      const getFinalChemicals = () => {\n        const bomChemicalsList = document.getElementById(\"bom-chemicals-list\");\n\n        if (!bomChemicalsList) {\n          return [];\n        }\n\n        const chemicalRows = Array.from(\n          bomChemicalsList.querySelectorAll(\".tw-chemical-row\")\n        );\n\n        const finalChemicals = chemicalRows.map(row => {\n          const chemicalInput = row.querySelector(\".tw-chemical-name-input\");\n          const qtyInput = row.querySelector(\".tw-chemical-qty-input\");\n          const uomInput = row.querySelector(\".tw-chemical-uom-input\");\n\n          const chemicalName = chemicalInput ? chemicalInput.value.trim() : '';\n\n          const warehouseData = sourceWarehouseCache[chemicalName] || {};\n\n          return {\n            chemical: chemicalName,\n            quantity: qtyInput ? parseFloat(qtyInput.value) : 0,\n            uom: uomInput ? uomInput.value : '',\n            source_warehouse: warehouseData.source_warehouse || null\n          };\n        }).filter(item => item.chemical !== '');\n\n        return finalChemicals;\n      };\n\n      // Data Processing Functions\n      const processScoutingData = (scoutingEntries) => {\n        const dataMap = new Map();\n        const pestsInGreenhouse = new Set();\n        const stagesInGreenhouse = new Set();\n        const plantSectionsInGreenhouse = new Set();\n\n        scoutingEntries.forEach((entry) => {\n          const bedNum = parseBedNumber(entry.bed);\n          const zoneNum = getZoneNumber(entry.zone);\n          if (bedNum && zoneNum) {\n            const key = `${bedNum}-${zoneNum}`;\n            if (!dataMap.has(key)) dataMap.set(key, []);\n            const pestsInZone = dataMap.get(key);\n            const pests = entry.pests_scouting_entry || [];\n            pests.forEach((p) => {\n              pestsInGreenhouse.add(p.pest);\n              stagesInGreenhouse.add(p.stage);\n              if (p.plant_section)\n                plantSectionsInGreenhouse.add(p.plant_section);\n              pestsInZone.push({\n                pest: p.pest,\n                count: p.count,\n                stage: p.stage,\n                symbol: p.symbol,\n                color: p.color,\n                plant_section: p.plant_section || \"N/A\",\n              });\n            });\n          }\n        });\n\n        const finalDataMap = new Map();\n        dataMap.forEach((pests, key) => {\n          finalDataMap.set(\n            key,\n            pests.sort((a, b) => a.pest.localeCompare(b.pest))\n          );\n        });\n\n        return {\n          finalDataMap,\n          pestsInGreenhouse,\n          stagesInGreenhouse,\n          plantSectionsInGreenhouse,\n        };\n      };\n\n      const calculateAreaToSpray = () => {\n        const scope = scopeSelect.value;\n        let totalAreaSqMeters = 0;\n        let totalAreaHectares = 0;\n\n        if (scope === \"Full Greenhouse\") {\n          totalAreaSqMeters = bedDataCache.reduce(\n            (sum, d) => sum + (d.bed__area || 0),\n            0\n          );\n        } else if (scope === \"Specific Variety\") {\n          const selectedVarietyNames = Array.from(\n            varietyMultiSelect.selectedOptions\n          ).map((option) => option.value);\n          if (selectedVarietyNames.length > 0) {\n            const accountedVarieties = new Set();\n            bedDataCache.forEach((d) => {\n              if (\n                selectedVarietyNames.includes(d.variety) &&\n                !accountedVarieties.has(d.variety) &&\n                d.total_variety_area > 0\n              ) {\n                totalAreaSqMeters += d.total_variety_area;\n                accountedVarieties.add(d.variety);\n              }\n            });\n          }\n        } else if (scope === \"Specific Bed(s)\") {\n          const bedString = bedNumbersInput.value.trim();\n          if (bedString) {\n            const targetBeds = new Set();\n            const segments = bedString\n              .split(\",\")\n              .map((s) => s.trim())\n              .filter((s) => s.length > 0);\n            segments.forEach((segment) => {\n              const rangeMatch = segment.match(/^(\\d+)\\s*-\\s*(\\d+)$/);\n              if (rangeMatch) {\n                const start = parseInt(rangeMatch[1]);\n                const end = parseInt(rangeMatch[2]);\n                for (let i = start; i <= end; i++) targetBeds.add(String(i));\n              } else {\n                const singleBed = segment.match(/^(\\d+)$/);\n                if (singleBed) targetBeds.add(singleBed[1]);\n              }\n            });\n            bedDataCache.forEach((d) => {\n              if (targetBeds.has(d.bed))\n                totalAreaSqMeters += d.bed__area || 0;\n            });\n          }\n        }\n\n        if (totalAreaSqMeters > 0)\n          totalAreaHectares = totalAreaSqMeters / 10000;\n        areaToSprayInput.value =\n          totalAreaHectares > 0 ? totalAreaHectares.toFixed(4) : 0;\n      };\n\n      // Rendering Functions\n      const renderHeatmapGrid = (\n        numBeds,\n        zonesPerBed,\n        bedNumbering,\n        zoneNumbering\n      ) => {\n        mainGrid.innerHTML = \"\";\n        xAxisLabelsContainer.innerHTML = \"\";\n        yAxisLabelsContainer.innerHTML = \"\";\n        document.documentElement.style.setProperty(\"--num-beds\", numBeds);\n        document.documentElement.style.setProperty(\n          \"--zones-per-bed\",\n          zonesPerBed\n        );\n\n        const zoneRange =\n          zoneNumbering === \"Left to Right\"\n            ? Array.from({ length: zonesPerBed }, (_, i) => zonesPerBed - i)\n            : Array.from({ length: zonesPerBed }, (_, i) => i + 1);\n        zoneRange.forEach((i) => {\n          const label = document.createElement(\"div\");\n          label.textContent = i;\n          xAxisLabelsContainer.appendChild(label);\n        });\n\n        const bedRange =\n          bedNumbering === \"Top to Bottom\"\n            ? Array.from({ length: numBeds }, (_, i) => numBeds - i)\n            : Array.from({ length: numBeds }, (_, i) => i + 1);\n        bedRange.forEach((i) => {\n          const label = document.createElement(\"div\");\n          label.textContent = i;\n          yAxisLabelsContainer.appendChild(label);\n        });\n\n        for (let bed = numBeds; bed >= 1; bed--) {\n          for (let zone = zonesPerBed; zone >= 1; zone--) {\n            const cell = document.createElement(\"div\");\n            cell.classList.add(\"tw-grid-cell\");\n            cell.dataset.bed = bed;\n            cell.dataset.zone = zone;\n            cell.id = `bed-${bed}-zone-${zone}`;\n            const tooltip = document.createElement(\"div\");\n            tooltip.classList.add(\"tw-tooltip\");\n            tooltip.innerHTML = `Bed ${bed}, Zone ${zone}<br>No pests reported.`;\n            cell.appendChild(tooltip);\n            mainGrid.appendChild(cell);\n          }\n        }\n      };\n\n      const renderPestOverlay = (\n        activePests,\n        activeStages,\n        activeRequirements,\n        activePlantSections\n      ) => {\n        const colorPriority = {\n          \"#eb0707\": 5,\n          \"#de6a6a\": 4,\n          \"#b373f0\": 3,\n          \"#f07373\": 2,\n          \"#b57e24\": 1,\n          \"#0ef09d\": 0,\n          \"#c5e1fa\": 0,\n          \"#f0a8a8\": 0,\n          \"#d3e66c\": 0,\n          \"#a2f5d5\": 0,\n          \"#daf7ec\": 0,\n          \"#e9f0c5\": 0,\n        };\n        const selectedVariety = varietySelect.value;\n        const varietyRequirements =\n          varietyRequirementsCache.get(selectedVariety) || [];\n        const bedThreshold = varietyRequirements.find(\n          (t) => t.scope === \"Bed-Level\"\n        );\n\n        document.querySelectorAll(\".tw-grid-cell\").forEach((cell) => {\n          const bed = cell.dataset.bed;\n          const zone = cell.dataset.zone;\n          const key = `${bed}-${zone}`;\n          const pestsInZone = dataMapCache.get(key) || [];\n          const tooltip = cell.querySelector(\".tw-tooltip\");\n          cell.innerHTML = \"\";\n          cell.appendChild(tooltip);\n          cell.classList.remove(\n            \"tw-threshold-high\",\n            \"tw-threshold-moderate\",\n            \"tw-threshold-low\",\n            \"tw-highlight\"\n          );\n          cell.style.backgroundColor = \"\";\n\n          const filteredPests = pestsInZone.filter(\n            (p) =>\n              activePests.includes(p.pest) &&\n              activeStages.includes(p.stage) &&\n              (!p.plant_section ||\n                activePlantSections.includes(p.plant_section))\n          );\n\n          if (filteredPests.length > 0) {\n            let tooltipContent = `Bed ${bed}, Zone ${zone}<br>`;\n            let highestAlertLevel = 0;\n            filteredPests.forEach((pest) => {\n              const pestElement = document.createElement(\"div\");\n              pestElement.classList.add(\"tw-pest-line\");\n              pestElement.style.backgroundColor = pest.color;\n              cell.appendChild(pestElement);\n              if (bedThreshold) {\n                if (\n                  activeRequirements.includes(\"high\") &&\n                  pest.count >= bedThreshold.high\n                ) {\n                  highestAlertLevel = Math.max(highestAlertLevel, 3);\n                } else if (\n                  activeRequirements.includes(\"moderate\") &&\n                  pest.count >= bedThreshold.moderate\n                ) {\n                  highestAlertLevel = Math.max(highestAlertLevel, 2);\n                } else if (\n                  activeRequirements.includes(\"low\") &&\n                  pest.count >= bedThreshold.low\n                ) {\n                  highestAlertLevel = Math.max(highestAlertLevel, 1);\n                }\n              }\n              tooltipContent += `<strong>${pest.pest}</strong>: ${pest.count\n                } ${pest.symbol || \"\"} (Section: ${pest.plant_section || \"N/A\"\n                })<br>`;\n              if (bedThreshold) {\n                tooltipContent += `Requirements: (L:${bedThreshold.low} M:${bedThreshold.moderate} H:${bedThreshold.high})<br>`;\n              }\n            });\n            if (highestAlertLevel === 3)\n              cell.classList.add(\"tw-threshold-high\");\n            else if (highestAlertLevel === 2)\n              cell.classList.add(\"tw-threshold-moderate\");\n            else if (highestAlertLevel === 1)\n              cell.classList.add(\"tw-threshold-low\");\n            tooltip.innerHTML = tooltipContent;\n          } else if (pestsInZone.length > 0) {\n            cell.style.backgroundColor = \"#f8f9fa\";\n            let tooltipContent = `Bed ${bed}, Zone ${zone}<br>Pests present, but not filtered for.<br>`;\n            pestsInZone.forEach((pest) => {\n              tooltipContent += `<strong>${pest.pest}</strong>: ${pest.count\n                } ${pest.symbol || \"\"} (Section: ${pest.plant_section || \"N/A\"\n                })<br>`;\n            });\n            tooltip.innerHTML = tooltipContent;\n          } else {\n            cell.classList.add(\"tw-highlight\");\n            cell.style.backgroundColor = \"#f8f9fa\";\n            tooltip.innerHTML = `Bed ${bed}, Zone ${zone}<br>No data reported.`;\n          }\n        });\n      };\n\n\n      const renderStockBalances = (\n        balances,\n        containerElement,\n        allWarehouses\n      ) => {\n        stockBalancesContainer.classList.remove(\"tw-hidden\");\n\n        warehouseGroupHeader.setAttribute(\"colspan\", allWarehouses.length);\n\n        let headerHtml = \"\";\n        for (const wh of allWarehouses) {\n          headerHtml += `<th class=\"tw-px-3 tw-py-2 tw-text-center tw-text-xs tw-font-medium tw-text-gray-500 tw-tracking-wider tw-border-b tw-border-r tw-border-gray-200 tw-align-top\">${wh.split(\" \")[2]}</th>`;\n        }\n        warehouseHeadersRow.innerHTML = headerHtml;\n\n        let bodyHtml = \"\";\n        const sortedItems = Object.keys(balances).sort();\n\n        const totalColspan = allWarehouses.length + 3;\n\n        for (const itemName of sortedItems) {\n          const itemBalances = balances[itemName];\n          let totalStock = 0;\n\n          sourceWarehouseCache[itemName] = sourceWarehouseCache[itemName] || {\n            source_warehouse: null\n          };\n\n          let warehouseBalanceHtml = \"\";\n          let selectOptionsHtml =\n            '<option value=\"\">-- Select Source --</option>';\n\n          for (const wh of allWarehouses) {\n            const qty = itemBalances[wh] || 0.0;\n            totalStock += qty;\n            const qtyFormatted = qty.toFixed(2);\n\n            const qtyClass =\n              qty === 0.0\n                ? \"tw-text-red-500 tw-font-semibold\"\n                : \"tw-text-gray-800\";\n\n            warehouseBalanceHtml += `<td class=\"tw-px-3 tw-py-2 tw-whitespace-nowrap tw-text-center ${qtyClass} tw-border tw-border-gray-200\">${qtyFormatted}</td>`;\n\n            if (qty > 0) {\n              const shortWhName = wh.split(\" - \")[0];\n              selectOptionsHtml += `<option value=\"${wh}\">${shortWhName} (${qtyFormatted})</option>`;\n            }\n          }\n\n          const totalClass =\n            totalStock === 0.0\n              ? \"tw-bg-red-100 tw-text-red-800\"\n              : \"tw-bg-blue-50 tw-text-blue-700\";\n\n          bodyHtml += `<tr id=\"row-${itemName}\" class=\"hover:tw-bg-gray-50\">`;\n\n          bodyHtml += `<td class=\"tw-px-3 tw-py-2 tw-font-bold tw-text-gray-800 tw-border tw-border-gray-200\">${itemName}</td>`;\n          bodyHtml += warehouseBalanceHtml;\n\n          bodyHtml += `\n        <td class=\"tw-px-3 tw-py-1 tw-bg-green-50 tw-border tw-border-gray-200\">\n            <select id=\"select-wh-${itemName}\" class=\"tw-w-full tw-p-1.5 tw-border tw-border-gray-300 tw-rounded-md focus:tw-ring-blue-500 focus:tw-border-blue-500 tw-text-sm\" \n                data-item-code=\"${itemName}\" onchange=\"handleWarehouseChange(this)\">\n                ${selectOptionsHtml}\n            </select>\n        </td>`;\n\n          bodyHtml += `<td class=\"tw-px-3 tw-py-2 tw-text-center tw-font-bold ${totalClass} tw-border tw-border-gray-200\">${totalStock.toFixed(\n            2\n          )}</td>`;\n\n          bodyHtml += \"</tr>\";\n        }\n\n        containerElement.innerHTML =\n          bodyHtml ||\n          `<tr><td colspan=\"${totalColspan}\" class=\"tw-text-center tw-py-4 tw-text-gray-500 tw-border tw-border-gray-200\">No tracked stock to display.</td></tr>`;\n      };\n      // UI Update Functions\n      const updatePestCheckboxes = (pestsInGreenhouse) => {\n        targetsContainer\n          .querySelectorAll('input[type=\"checkbox\"]')\n          .forEach((checkbox) => {\n            const pestName = checkbox.value;\n            checkbox.checked = pestsInGreenhouse.includes(pestName);\n            checkbox.disabled = !pestsInGreenhouse.includes(pestName);\n          });\n      };\n\n      const updateStageCheckboxes = (stagesInGreenhouse) => {\n        stagesContainer.innerHTML = \"\";\n        stagesInGreenhouse.forEach((stage) => {\n          const div = document.createElement(\"div\");\n          div.classList.add(\"tw-checkbox-item\");\n          const checkbox = document.createElement(\"input\");\n          checkbox.type = \"checkbox\";\n          checkbox.id = `stage-${stage}`;\n          checkbox.value = stage;\n          checkbox.checked = true;\n          const label = document.createElement(\"label\");\n          label.htmlFor = `stage-${stage}`;\n          label.textContent = stage;\n          div.appendChild(checkbox);\n          div.appendChild(label);\n          stagesContainer.appendChild(div);\n        });\n      };\n\n      const updatePlantSectionCheckboxes = (sectionsInGreenhouse) => {\n        plantSectionContainer\n          .querySelectorAll('input[type=\"checkbox\"]')\n          .forEach((checkbox) => {\n            const sectionName = checkbox.value;\n            checkbox.checked = sectionsInGreenhouse.includes(sectionName);\n            checkbox.disabled = !sectionsInGreenhouse.includes(sectionName);\n          });\n      };\n\n      const populateVarieties = (varieties) => {\n        varietySelect.innerHTML =\n          '<option value=\"\">Select a variety</option>';\n        varietyMultiSelect.innerHTML = \"\";\n        varieties.forEach((v) => {\n          const option = document.createElement(\"option\");\n          option.value = v.name;\n          option.textContent = v.name;\n          varietySelect.appendChild(option);\n          const multiSelectOption = document.createElement(\"option\");\n          multiSelectOption.value = v.name;\n          multiSelectOption.textContent = v.name;\n          varietyMultiSelect.appendChild(multiSelectOption);\n        });\n      };\n\n      const populateTeams = (teams) => {\n        sprayTeamSelect.innerHTML = \"\";\n        teams.forEach((team) => {\n          const option = document.createElement(\"option\");\n          option.value = team.name;\n          option.textContent = team.name;\n          sprayTeamSelect.appendChild(option);\n        });\n      };\n\n      const populateBoms = (boms) => {\n        bomSelect.innerHTML = '<option value=\"\">Select a BOM</option>';\n        boms.forEach((b) => {\n          const option = document.createElement(\"option\");\n          option.value = b.name;\n          option.textContent = b.name;\n          bomSelect.appendChild(option);\n        });\n      };\n\n      const populateBomDetails = (selectedBomName) => {\n        const selectedBom = bomsDataCache.find(\n          (bom) => bom.name === selectedBomName\n        );\n        bomChemicalsList.innerHTML = \"\";\n        if (selectedBom) {\n          bomDetailsContainer.classList.remove(\"tw-hidden\");\n          waterPhInput.value = selectedBom.custom_water_ph || \"\";\n          waterHardnessInput.value = selectedBom.custom_water_hardness || \"\";\n          const chemicals = bomItemsCache.filter(\n            (item) => item.parent === selectedBomName\n          );\n          chemicals.forEach((item) => {\n            const itemRow = createChemicalRow(\n              item.item_name,\n              item.qty,\n              item.uom\n            );\n            bomChemicalsList.appendChild(itemRow);\n          });\n          addChemicalBtn.style.display = \"block\";\n        } else {\n          bomDetailsContainer.classList.add(\"tw-hidden\");\n          addChemicalBtn.style.display = \"none\";\n        }\n      };\n\n      const fetchAndRenderStockBalances = (chemicalsList) => {\n        const uniqueChemicals = [...new Set(chemicalsList.filter(name => name && name.trim() !== ''))];\n\n        if (!uniqueChemicals || uniqueChemicals.length === 0) {\n          stockBalanceTableBody.innerHTML = `\n            <tr class=\"tw-text-center\">\n              <td colspan=\"8\" class=\"tw-py-4 tw-text-red-600\">\n                No chemicals found to check stock.\n              </td>\n            </tr>`;\n          return;\n        }\n\n        const chemicals_list = { chemicals: uniqueChemicals };\n\n        stockBalanceTableBody.innerHTML =\n          '<tr><td colspan=\"8\" class=\"tw-text-center tw-py-4 tw-text-gray-500 tw-font-semibold\">Fetching stock balances...</td></tr>';\n\n        frappe.call({\n          method: \"getBomStockBalances\",\n          args: { data: JSON.stringify(chemicals_list) },\n          callback: function (r) {\n            const stockData = r.data?.stock_balances;\n            if (r.data?.item_uom_map) {\n              chemicalUomCache = { ...chemicalUomCache, ...r.data.item_uom_map };\n              refreshRowUoms();\n            }\n            if (stockData) {\n              const firstItem = Object.keys(stockData)[0];\n              const allWarehouses = firstItem\n                ? Object.keys(stockData[firstItem])\n                : [];\n\n              renderStockBalances(\n                stockData,\n                stockBalanceTableBody,\n                allWarehouses\n              );\n            } else {\n              stockBalanceTableBody.innerHTML =\n                '<tr class=\"tw-text-center\"><td colspan=\"8\" class=\"tw-py-4 tw-text-gray-500\">No stock data found or unexpected server response.</td></tr>';\n            }\n          },\n          freeze: true,\n        });\n      };\n\n      const toggleThresholdControls = (varietyName) => {\n        const hasVariety = varietyName && varietyName.length > 0;\n        const thresholds = hasVariety\n          ? varietyRequirementsCache.get(varietyName) || []\n          : [];\n        const hasRequirements = thresholds.length > 0;\n        const thresholdCheckboxes = thresholdContainer.querySelectorAll(\n          'input[type=\"checkbox\"]'\n        );\n\n        if (hasVariety && !hasRequirements) {\n          thresholdCheckboxes.forEach((cb) => {\n            cb.disabled = true;\n            cb.checked = false;\n          });\n          thresholdMessage.innerHTML = `\n            <strong>The chemical Requirements for this variety have not been set.</strong>\n            To use this feature, please configure them\n            <a href=\"https://kaitet-group.upande.com/app/item/${varietyName}\" class=\"tw-text-blue-400 hover:tw-underline\" target=\"_blank\">here</a>.`;\n          thresholdMessage.classList.remove(\"tw-hidden\");\n        } else if (!hasVariety) {\n          thresholdCheckboxes.forEach((cb) => {\n            cb.disabled = true;\n            cb.checked = false;\n          });\n          thresholdMessage.classList.add(\"tw-hidden\");\n        } else {\n          thresholdCheckboxes.forEach((cb) => {\n            cb.disabled = false;\n            cb.checked = true;\n          });\n          thresholdMessage.classList.add(\"tw-hidden\");\n        }\n      };\n\n      const createChemicalRow = (itemName = \"\", qty = \"\", uom = \"\") => {\n        const row = document.createElement(\"div\");\n        row.className =\n          \"tw-chemical-row tw-grid tw-grid-cols-4 tw-gap-4 tw-items-center tw-px-4 tw-py-3 tw-text-sm tw-text-gray-700 tw-border-b tw-border-gray-200 hover:tw-bg-gray-50\";\n\n        const chemicalFieldContainer = document.createElement(\"div\");\n        chemicalFieldContainer.className = \"tw-relative\";\n\n        const chemicalInput = document.createElement(\"input\");\n        chemicalInput.type = \"text\";\n        chemicalInput.className =\n          \"tw-chemical-name-input tw-w-full tw-px-2 tw-py-1 tw-border tw-border-gray-300 tw-rounded-md tw-bg-white tw-text-gray-800 tw-focus:ring-1 tw-focus:ring-blue-500 tw-focus:outline-none\";\n        chemicalInput.value = itemName;\n        chemicalInput.placeholder = \"Chemical\";\n        chemicalInput.readOnly = !!itemName;\n\n        chemicalInput.addEventListener(\"focus\", (e) => {\n          const chemicalNames = allChemicalsCache.map(i => i.item_name || i);\n          showGlobalPopup(e.target, chemicalNames, 'chemical');\n        });\n\n        chemicalFieldContainer.appendChild(chemicalInput);\n\n        const qtyInput = document.createElement(\"input\");\n        qtyInput.type = \"number\";\n        qtyInput.className =\n          \"tw-chemical-qty-input tw-text-center tw-w-full tw-px-2 tw-py-1 tw-border tw-border-gray-300 tw-rounded-md tw-text-gray-800 tw-focus:ring-1 tw-focus:ring-blue-500 tw-focus:outline-none\";\n        qtyInput.value = qty;\n        qtyInput.min = \"0\";\n        qtyInput.step = \"0.01\";\n        // qtyInput.readOnly = !!itemName;\n\n        const uomFieldContainer = document.createElement(\"div\");\n        uomFieldContainer.className = \"tw-relative\";\n\n        const uomInput = document.createElement(\"input\");\n        uomInput.type = \"text\";\n        uomInput.className =\n          \"tw-chemical-uom-input tw-text-center tw-w-full tw-px-2 tw-py-1 tw-border tw-border-gray-300 tw-rounded-md tw-bg-white tw-text-gray-800 tw-focus:ring-1 tw-focus:ring-blue-500 tw-focus:outline-none\";\n        uomInput.value = uom;\n        uomInput.placeholder = \"UoM\";\n        uomInput.readOnly = true;\n\n        uomFieldContainer.appendChild(uomInput);\n\n        const removeBtn = document.createElement(\"button\");\n        removeBtn.type = \"button\";\n        removeBtn.className =\n          \"tw-remove-btn tw-bg-black tw-text-white tw-rounded-md tw-py-1 tw-px-2 tw-text-sm tw-transition-colors tw-duration-200 tw-focus:outline-none tw-focus:ring-2 tw-focus:ring-red-500 tw-focus:ring-offset-2\";\n        removeBtn.innerHTML = \"&times;\";\n\n        removeBtn.addEventListener(\"click\", () => {\n          row.remove();\n          updateStockBalancesFromUserInput();\n        });\n\n        row.appendChild(chemicalFieldContainer);\n        row.appendChild(qtyInput);\n        row.appendChild(uomFieldContainer);\n        row.appendChild(removeBtn);\n        return row;\n      };\n\n      // Chemical Row Management\n      const addNewChemicalRow = () => {\n        const newRow = createChemicalRow();\n        bomChemicalsList.appendChild(newRow);\n      };\n\n      const refreshRowUoms = () => {\n        const rows = document.querySelectorAll(\".tw-chemical-row\");\n        rows.forEach(row => {\n          const chemicalInput = row.querySelector(\".tw-chemical-name-input\");\n          const uomInput = row.querySelector(\".tw-chemical-uom-input\");\n          const chemicalName = chemicalInput.value;\n          if (chemicalName && chemicalUomCache[chemicalName]) {\n            uomInput.value = chemicalUomCache[chemicalName];\n          }\n        });\n      };\n\n      // Data Fetching\n      const fetchScoutingData = (greenhouse) => {\n        statusMessage.textContent = \"Loading data...\";\n        heatmapGridWrapper.classList.add(\"tw-hidden\");\n        targetsContainer\n          .querySelectorAll('input[type=\"checkbox\"]')\n          .forEach((cb) => (cb.checked = false));\n        stagesContainer.innerHTML = \"\";\n        plantSectionContainer\n          .querySelectorAll('input[type=\"checkbox\"]')\n          .forEach((cb) => (cb.checked = false));\n        varietySelect.innerHTML =\n          '<option value=\"\">Select a variety</option>';\n        bomSelect.innerHTML = '<option value=\"\">Select a BOM</option>';\n        bomDetailsContainer.classList.add(\"tw-hidden\");\n        renderHeatmapGrid(0, 0);\n        toggleThresholdControls(null);\n\n        frappe.call({\n          method: \"getScoutingData\",\n          args: {\n            greenhouse: greenhouse,\n            date: document.getElementById('scouting-date').value || new Date().toISOString().slice(0, 10),\n          },\n          callback: function (r) {\n            if (r.data) {\n              if (\n                r.data.scouting_entries &&\n                r.data.scouting_entries.length > 0\n              ) {\n                scoutingDataCache = r.data.scouting_entries;\n                const {\n                  finalDataMap,\n                  pestsInGreenhouse,\n                  stagesInGreenhouse,\n                  plantSectionsInGreenhouse,\n                } = processScoutingData(scoutingDataCache);\n                dataMapCache.clear();\n                finalDataMap.forEach((val, key) =>\n                  dataMapCache.set(key, val)\n                );\n                if (r.data.varieties) {\n                  populateVarieties(r.data.varieties);\n                  varietyRequirementsCache.clear();\n                  r.data.varieties.forEach((v) => {\n                    varietyRequirementsCache.set(v.name, v.thresholds);\n                  });\n                }\n                if (r.data.spray_team_team) {\n                  populateTeams(r.data.spray_team_team);\n                  teamDataCache = r.data.spray_team_team.map((v) => v.name);\n                }\n                updatePestCheckboxes([...pestsInGreenhouse]);\n                updateStageCheckboxes([...stagesInGreenhouse]);\n                updatePlantSectionCheckboxes([...plantSectionsInGreenhouse]);\n                const { maxBed, maxZone } =\n                  findMaxDimensions(scoutingDataCache);\n                const bedNumbering =\n                  r.data.custom_bed_numbering || \"Top to Bottom\";\n                const zoneNumbering =\n                  r.data.custom_zone_numbering || \"Left to Right\";\n                renderHeatmapGrid(\n                  maxBed,\n                  maxZone,\n                  bedNumbering,\n                  zoneNumbering\n                );\n                updateHeatmap();\n                heatmapGridWrapper.classList.remove(\"tw-hidden\");\n                statusMessage.textContent = \"\";\n                if (r.data.boms) {\n                  bomsDataCache = r.data.boms;\n                  bomItemsCache = r.data.bom_items;\n                  allChemicalsCache = r.data.all_chemicals\n                    ? [...new Set(r.data.all_chemicals)].sort()\n                    : [];\n                  populateBoms(bomsDataCache);\n                }\n                bedDataCache = r.data.bed_data || [];\n              } else {\n                statusMessage.textContent =\n                  \"No data found for this greenhouse.\";\n                heatmapGridWrapper.classList.add(\"tw-hidden\");\n              }\n            } else {\n              statusMessage.textContent =\n                \"An error occurred while fetching data.\";\n            }\n          },\n          error: function () {\n            statusMessage.textContent =\n              \"An error occurred while fetching data.\";\n          },\n        });\n      };\n\n      // Heatmap Update\n      const updateHeatmap = () => {\n        if (greenhouseSelect.value && scoutingDataCache.length > 0) {\n          renderPestOverlay(\n            getActivePests(),\n            getActiveStages(),\n            getActiveRequirements(),\n            getActivePlantSections()\n          );\n        }\n      };\n\n      // Event Handlers\n      const handleGreenhouseChange = (event) => {\n        if (event.target.value) {\n          varietySelect.value = \"\";\n          sprayTypeSelect.value = \"\";\n          kitSelect.value = \"\";\n          scopeSelect.value = \"\";\n          bomSelect.value = \"\";\n          if (waterPhInput) waterPhInput.value = \"\";\n          if (waterHardnessInput) waterHardnessInput.value = \"\";\n          if (waterVolumeInput) waterVolumeInput.value = \"\";\n          if (areaToSprayInput) areaToSprayInput.value = \"\";\n          targetsCheckboxes.forEach((checkbox) => (checkbox.checked = false));\n          stagesCheckboxes.forEach((checkbox) => (checkbox.checked = false));\n          plantSectionCheckboxes.forEach(\n            (checkbox) => (checkbox.checked = false)\n          );\n          if (bomDetailsContainer)\n            bomDetailsContainer.classList.add(\"tw-hidden\");\n          if (bomChemicalsList) bomChemicalsList.innerHTML = \"\";\n          if (stockBalancesContainer)\n            stockBalancesContainer.classList.add(\"tw-hidden\");\n          if (stockBalanceTableBody) {\n            const safeColspan = 8;\n            stockBalanceTableBody.innerHTML = `\n              <tr>\n                <td colspan=\"${safeColspan}\" class=\"tw-text-center tw-py-4 tw-text-gray-500\">\n                  Loading...\n                </td>\n              </tr>`;\n          }\n          if (warehouseHeadersRow) warehouseHeadersRow.innerHTML = \"\";\n        }\n        fetchScoutingData(event.target.value);\n      };\n\n      const handleScopeChange = (event) => {\n        bedNumbersContainer.classList.add(\"tw-hidden\");\n        varietySelectionContainer.classList.add(\"tw-hidden\");\n        bedNumbersInput.value = \"\";\n        varietyMultiSelect.selectedIndex = -1;\n        selectedVarietiesDisplay.innerHTML = `<p class=\"tw-text-gray-500\">Selected varieties will appear here...</p>`;\n        if (event.target.value === \"Specific Bed(s)\") {\n          bedNumbersContainer.classList.remove(\"tw-hidden\");\n        } else if (event.target.value === \"Specific Variety\") {\n          varietySelectionContainer.classList.remove(\"tw-hidden\");\n        }\n        calculateAreaToSpray();\n      };\n\n      const handleVarietyMultiSelectChange = () => {\n        const selectedOptions = Array.from(\n          varietyMultiSelect.selectedOptions\n        );\n        const selectedVarietyNames = selectedOptions.map(\n          (option) => option.textContent\n        );\n        selectedVarietiesDisplay.innerHTML =\n          selectedVarietyNames.length > 0\n            ? `<p class=\"tw-font-semibold\">Selected:</p> ${selectedVarietyNames.join(\n              \", \"\n            )}`\n            : `<p class=\"tw-text-gray-500\">Selected varieties will appear here...</p>`;\n        calculateAreaToSpray();\n      };\n\n      window.handleWarehouseChange = function (element) {\n        const itemCode = element.getAttribute(\"data-item-code\");\n        const warehouse = element.value;\n        if (sourceWarehouseCache[itemCode]) {\n          sourceWarehouseCache[itemCode].source_warehouse = warehouse || null;\n        }\n      };\n\n      const handleFormSubmit = (event) => {\n        event.preventDefault();\n        const greenhouse = greenhouseSelect.value;\n        const variety = varietySelect.value;\n        const sprayType = sprayTypeSelect.value;\n        const kit = kitSelect.value;\n        const scope = scopeSelect.value;\n        const bom = bomSelect.value;\n        const waterPh = waterPhInput.value;\n        const waterHardness = waterHardnessInput.value;\n        const waterVolume = waterVolumeInput.value;\n        const areaToSpray = areaToSprayInput.value;\n        const sprayTeam = sprayTeamSelect.value;\n        const targets = Array.from(\n          document.querySelectorAll('input[name=\"targets\"]:checked')\n        ).map((checkbox) => checkbox.value);\n        const stages = getActiveStages();\n        const plantSections = getActivePlantSections();\n        const chemicals = getFinalChemicals();\n        if (\n          !greenhouse ||\n          !variety ||\n          targets.length === 0 ||\n          stages.length === 0 ||\n          plantSections.length === 0 ||\n          !sprayType ||\n          !kit ||\n          !scope ||\n          !bom\n        ) {\n          frappe.msgprint(\n            \"Please fill out all required fields (greenhouse, variety, targets, stages, plant sections, spray type, kit, scope, BOM).\"\n          );\n          return;\n        }\n\n        if (chemicals.length === 0) {\n          frappe.msgprint(\"Please add at least one chemical.\");\n          return;\n        }\n\n        for (const chemical of chemicals) {\n          console.log(chemical)\n          if (!chemical.chemical || !chemical.uom || chemical.quantity <= 0 || !chemical.source_warehouse) {\n            frappe.msgprint(\n              \"All chemical rows must have a valid item name, quantity, unit of measure and source warehouse.\"\n            );\n            return;\n          }\n        }\n\n        if (!waterPh || !waterHardness) {\n          frappe.msgprint(\n            \"Please provide values for water pH and water hardness.\"\n          );\n          return;\n        }\n\n        if (scope === \"Specific Variety\") {\n          const selectedVarieties = Array.from(\n            varietyMultiSelect.selectedOptions\n          ).map((option) => option.value);\n          custom_scope_value = selectedVarieties.join(\",\");\n        } else if (scope === \"Specific Bed(s)\") {\n          custom_scope_value = bedNumbersInput.value;\n        }\n\n        const formData = {\n          custom_type: \"Application Floor Plan\",\n          custom_greenhouse: greenhouse,\n          custom_variety: variety,\n          custom_targets: targets,\n          custom_stages: stages,\n          custom_plant_sections: plantSections,\n          custom_spray_type: sprayType,\n          custom_kit: kit,\n          custom_scope: scope,\n          custom_scope_details: custom_scope_value,\n          production_item: bom,\n          qty: 1,\n          custom_water_ph: parseFloat(waterPh) || 0,\n          custom_water_hardness: parseFloat(waterHardness) || 0,\n          chemicals: chemicals,\n          custom_water_volume: waterVolume,\n          custom_area: areaToSpray,\n          custom_spray_team:sprayTeam\n        };\n\n        frappe.call({\n          method: 'preValidateFracIracGuidelines',\n          args: { raw_data: formData },\n          callback: function (r) {\n            const res = r.message;\n\n            // --- Success case ---\n            if (res?.status === \"success\") {\n              frappe.show_alert({\n                message: __(\"Validation passed. Work Order created successfully.\"),\n                indicator: \"green\"\n              });\n              frappe.set_route('List', 'Work Order');\n              return;\n            }\n\n            // --- Validation failed case ---\n            if (res?.status === \"validation_failed\") {\n              const dialog = new frappe.ui.Dialog({\n                title: __('FRAC/IRAC Validation Warning'),\n                size: 'large',\n                primary_action_label: __('Bypass and Create'),\n                primary_action: function () {\n                  dialog.hide();\n                  frappe.show_alert({\n                    message: __('Creating Work Order (Guidelines Bypassed)'),\n                    indicator: 'orange'\n                  });\n                  createWorkOrder(formData); // proceed with actual creation\n                },\n                secondary_action_label: __('Cancel'),\n                secondary_action: function () {\n                  dialog.hide();\n                  frappe.show_alert({\n                    message: __('Work Order creation cancelled'),\n                    indicator: 'red'\n                  });\n                }\n              });\n\n              // Inject validation HTML safely\n              const html = `\n                    <div style=\"max-height: 400px; overflow-y: auto;\">\n                      ${res.html || '<div>No validation details provided.</div>'}\n                      <div style=\"margin-top: 20px; padding: 15px; background-color: #fff3cd; border: 1px solid #ffc107; border-radius: 4px;\">\n                        <p style=\"margin: 0; color: #856404; font-weight: bold;\">\n                          Warning: Do you want to bypass these guidelines and create the Work Order anyway?\n                        </p>\n                        <p style=\"margin: 10px 0 0 0; color: #856404; font-size: 0.9em;\">\n                          Bypassing these guidelines may lead to reduced chemical effectiveness and increased pest/disease resistance.\n                        </p>\n                      </div>\n                    </div>\n              `;\n\n              dialog.body.innerHTML = html;\n              dialog.show();\n\n              // Style the bypass button as warning\n              dialog.$wrapper.find('.btn-primary')\n                .removeClass('btn-primary')\n                .addClass('btn-dark');\n\n              return;\n            }\n\n            // --- Unexpected server response ---\n            frappe.msgprint({\n              title: __('Validation Error'),\n              indicator: 'red',\n              message: __('Unexpected response from the server.')\n            });\n          },\n          error: function (err) {\n            console.error(\"Server error:\", err);\n            frappe.msgprint({\n              title: __('Server Error'),\n              indicator: 'red',\n              message: __('An error occurred while validating the spray plan. Please try again.')\n            });\n          }\n        });\n\n      };\n\n      const createWorkOrder = (data) => {\n        frappe.call({\n          method: \"createChemicalPlanWorkOrder\",\n          args: data,\n          callback: function (r) {\n            if (r.message && r.message.status === \"success\") {\n              frappe.msgprint(\n                `Work Order ${r.message.work_order_name} created successfully!`\n              );\n              form.reset();\n              bomChemicalsList.innerHTML = \"\";\n              bomDetailsContainer.classList.add(\"tw-hidden\");\n              addChemicalBtn.style.display = \"none\";\n            } else {\n              frappe.msgprint(\n                `Error creating Work Order: ${r.message?.message || \"Unknown error\"}`\n              );\n            }\n          },\n          error: function () {\n            frappe.msgprint(\n              \"An unexpected error occurred during creation. Please try again.\"\n            );\n          },\n        });\n      };\n\n      greenhouseSelect.addEventListener(\"change\", handleGreenhouseChange);\n      scopeSelect.addEventListener(\"change\", handleScopeChange);\n      varietySelect.addEventListener(\"change\", () => {\n        toggleThresholdControls(varietySelect.value);\n        updateHeatmap();\n      });\n      varietyMultiSelect.addEventListener(\n        \"change\",\n        handleVarietyMultiSelectChange\n      );\n      bedNumbersInput.addEventListener(\"input\", calculateAreaToSpray);\n      targetsContainer.addEventListener(\"change\", updateHeatmap);\n      stagesContainer.addEventListener(\"change\", updateHeatmap);\n      plantSectionContainer.addEventListener(\"change\", updateHeatmap);\n      thresholdContainer.addEventListener(\"change\", updateHeatmap);\n      bomSelect.addEventListener(\"change\", (event) => {\n        populateBomDetails(event.target.value);\n        const uniqueChemicals = bomItemsCache\n          .filter((item) => item.parent === event.target.value)\n          .map((item) => item.item_name);\n        fetchAndRenderStockBalances(uniqueChemicals);\n      });\n      if (addChemicalBtn)\n        addChemicalBtn.addEventListener(\"click\", addNewChemicalRow);\n      document.addEventListener(\"click\", (e) => {\n        document\n          .querySelectorAll(\".tw-dropdown-container\")\n          .forEach((container) => {\n            const dropdown = container.querySelector(\".tw-dropdown-content\");\n            const input = container.querySelector(\"input\");\n            if (!container.contains(e.target))\n              dropdown.style.display = \"none\";\n          });\n      });\n      document\n        .querySelector(\"form\")\n        .addEventListener(\"submit\", handleFormSubmit);\n\n      // Initial Setup\n      toggleThresholdControls(null);\n    });\n  </script>\n</body>\n\n</html>",
  "main_section_md": null,
  "meta_description": null,
  "meta_image": null,
  "meta_title": null,
  "modified": "2025-10-11 01:19:44.309063",
  "module": "Upande Scp",
  "name": "new-spray-plan",
  "page_blocks": [],
  "published": 1,
  "route": "new-application-floor-plan",
  "show_sidebar": 0,
  "show_title": 0,
  "slideshow": null,
  "start_date": null,
  "text_align": "Left",
  "title": "New Application Floor Plan",
  "website_sidebar": ""
 },
 {
  "breadcrumbs": null,
  "content_type": "HTML",
  "context_script": "",
  "css": "/*.navbar.navbar-light {*/\n/*  display: none !important;*/\n/*}*/\n.web-footer {\n  display: none !important;\n}",
  "docstatus": 0,
  "doctype": "Web Page",
  "dynamic_route": 1,
  "dynamic_template": 0,
  "enable_comments": 0,
  "end_date": null,
  "full_width": 1,
  "header": null,
  "insert_style": 1,
  "javascript": "document.addEventListener('DOMContentLoaded', function() {\n  const homeLink = document.querySelector('.navbar-brand');\n  if (homeLink) {\n    homeLink.href = \"https://kaitet-group-staging.upande.com/app/scouting-%26-crop-protection\";\n  }\n});",
  "main_section": null,
  "main_section_html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Scouting Map</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script>\n        tailwind.config = {\n            prefix: \"tw-\",\n        };\n    </script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        html,\n        body {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            overflow-x: hidden;\n        }\n\n        .main-container {\n            max-width: 100%;\n        }\n\n        #map-page {\n            height: 100vh;\n            width: 100%;\n            position: relative;\n        }\n\n        #map-container,\n        #map {\n            height: 100%;\n            width: 100%;\n        }\n\n        .leaflet-control-layers.leaflet-control-layers-expanded {\n            padding: 6px;\n        }\n\n        .leaflet-control-layers-toggle {\n            display: none;\n        }\n\n        /* NEW CSS for Date Picker Container */\n        #date-filter-container {\n            position: absolute;\n            top: 1rem;\n            right: 1rem;\n            z-index: 1001;\n            /* Higher than map controls */\n            background: white;\n            padding: 0.5rem 1rem;\n            border-radius: 0.5rem;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);\n            display: flex;\n            align-items: center;\n        }\n\n        #date-filter-container input[type=\"date\"] {\n            border: 1px solid #ccc;\n            padding: 0.25rem 0.5rem;\n            border-radius: 0.25rem;\n            font-size: 0.875rem;\n        }\n\n        #pest-legend {\n            position: absolute;\n            bottom: 8rem;\n            left: 1rem;\n            z-index: 1000;\n            background: white;\n            padding: 1rem;\n            border-radius: 0.5rem;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);\n            max-height: 50%;\n            overflow-y: auto;\n        }\n\n        #pest-legend label {\n            display: flex;\n            align-items: center;\n            cursor: pointer;\n            margin-bottom: 0.5rem;\n        }\n\n        .line-id-label {\n            font-family: sans-serif;\n            pointer-events: none;\n        }\n\n        .protomaps-legend {\n            background: white;\n            padding: 10px;\n            border-radius: 5px;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);\n            position: absolute;\n            bottom: 3rem;\n            right: 1rem;\n            z-index: 1000;\n            display: none;\n        }\n\n        .protomaps-legend label {\n            display: block;\n            cursor: pointer;\n        }\n\n        .leaflet-top.leaflet-right {\n            /* Adjusted to accommodate the date picker */\n            margin-top: 4rem !important;\n        }\n    </style>\n</head>\n\n<body class=\"tw-bg-white tw-font-sans\">\n    <div class=\"main-container\">\n        <div id=\"map-page\" class=\"tw-w-full tw-h-full tw-p-0 tw-flex tw-flex-col\">\n            <div id=\"date-filter-container\" class=\"tw-flex tw-items-center tw-space-x-2\">\n                <label for=\"scout-date-picker\" class=\"tw-text-sm tw-font-medium\">Date:</label>\n                <input type=\"date\" id=\"scout-date-picker\" class=\"tw-text-sm\" />\n            </div>\n            <div id=\"pest-legend\" class=\"tw-bg-white tw-p-4 tw-rounded tw-shadow tw-space-y-2 tw-max-w-xs\">\n                <p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Pest Legend</p>\n            </div>\n\n            <div id=\"map-container\" class=\"tw-w-full tw-flex-grow\">\n                <div id=\"map\" class=\"tw-w-full tw-h-full\"></div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-providers/1.13.0/leaflet-providers.min.js\"></script>\n    <script src=\"https://unpkg.com/@turf/turf@6/turf.min.js\"></script>\n    <script src=\"https://unpkg.com/protomaps-leaflet@5.0.0/dist/protomaps-leaflet.js\"></script>\n    <script src=\"/assets/frappe/js/frappe-web.min.js\"></script>\n    <script>\n        window.onload = function () {\n            /* ---------------- 1. Globals ---------------- */\n            window.map = null;\n            let mapInitialized = false;\n            window.zoneLayer = null;\n            window.lineIdLabels = null;\n            window.pestOverlayLayer = null;\n            let protomapsLayer = null;\n            let layersControl = null;\n            let darkFlavor = false;\n            window.allPests = [];\n            window.selectedPests = []; // **THIS MUST PERSIST ACROSS date changes**\n            window.lastScoutingData = null;\n            window.lastZonesGeojson = null;\n\n            /* ---------------- 2. Init Map ---------------- */\n            const initializeMap = () => {\n                if (mapInitialized) return;\n\n                window.map = L.map('map', {\n                    zoomSnap: 0.1,\n                    zoomDelta: 0.1,\n                    maxZoom: 22.4,\n                    zoomControl: false\n                });\n\n                mapInitialized = true;\n                renderBaseLayers();\n                window.map.setView([0.069507, 35.755801], 18);\n\n                const datePicker = document.getElementById('scout-date-picker');\n                const today = new Date().toISOString().slice(0, 10);\n                datePicker.value = today;\n\n                fetchAllData(today);\n\n                datePicker.addEventListener('change', (e) => {\n                    fetchAllData(e.target.value);\n                });\n\n                window.map.on('zoomend', () => {\n                    const currentZoom = window.map.getZoom();\n                });\n            };\n\n            const renderBaseLayers = () => {\n                const googleSatelliteLayer = L.tileLayer(\n                    'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {\n                        maxZoom: 25\n                    }\n                );\n                const openStreetMapLayer = L.tileLayer(\n                    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                        maxZoom: 25\n                    }\n                );\n                const osmSateliteLayer = L.tileLayer(\n                    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n                        maxZoom: 25\n                    }\n                );\n\n                const pmtilesUrl = 'https://res.cloudinary.com/dorft5vxy/raw/upload/v1757410567/eldama-ravine_gdtrsv.pmtiles';\n                protomapsLayer = protomapsL.leafletLayer({\n                    url: pmtilesUrl,\n                    flavor: \"light\",\n                    attribution: \"© Protomaps © OpenStreetMap\"\n                });\n\n                protomapsLayer.addTo(window.map);\n\n                const baseMaps = {\n                    \"Satellite View\": googleSatelliteLayer,\n                    \"Street Map\": openStreetMapLayer,\n                    \"OSM Satelite\": osmSateliteLayer,\n                    \"Protomaps Layer\": protomapsLayer\n                };\n\n                layersControl = L.control.layers(baseMaps, {}, {\n                    collapsed: false,\n                    position: 'topright'\n                }).addTo(window.map);\n\n                const ProtomapsLegendControl = L.Control.extend({\n                    onAdd: function (map) {\n                        const div = L.DomUtil.create('div', 'protomaps-legend');\n                        div.innerHTML = `\n                            <p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Map Flavor</p>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"light\" checked> Light</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"dark\"> Dark</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"white\"> White</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"grayscale\"> Grayscale</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"black\"> Black</label>\n                        `;\n\n                        L.DomEvent.on(div, 'change', (e) => {\n                            if (e.target.name === 'flavor') {\n                                const newFlavor = e.target.value;\n                                if (newFlavor == \"dark\" || newFlavor == \"black\") {\n                                    darkFlavor = true\n                                } else {\n                                    darkFlavor = false\n                                }\n                                if (window.lastZoneData) {\n                                    renderZones(window.lastZoneData);\n                                }\n                                if (window.map.hasLayer(protomapsLayer)) {\n                                    window.map.removeLayer(protomapsLayer);\n                                    layersControl.removeLayer(protomapsLayer);\n                                }\n                                protomapsLayer = protomapsL.leafletLayer({\n                                    url: pmtilesUrl,\n                                    flavor: newFlavor,\n                                    attribution: \"© Protomaps © OpenStreetMap\"\n                                });\n                                protomapsLayer.addTo(window.map);\n                                layersControl.addBaseLayer(protomapsLayer, \"Protomaps Layer\");\n                            }\n                        });\n                        return div;\n                    }\n                });\n\n                const protomapsLegend = new ProtomapsLegendControl({\n                    position: 'bottomright'\n                }).addTo(window.map);\n\n                window.map.on('baselayerchange', function (e) {\n                    if (e.name === \"Protomaps Layer\") {\n                        protomapsLegend.getContainer().style.display = 'block';\n                    } else {\n                        protomapsLegend.getContainer().style.display = 'none';\n                    }\n                });\n            };\n\n            // Renders the pest legend with checkboxes\n            const renderPestLegend = (pests, blendedColors = {}) => {\n                const pestLegend = document.getElementById('pest-legend');\n\n                // Filter the global selection list to only include pests available in the new data\n                const availablePestNames = new Set(pests.map(p => p.name));\n                const currentSelections = new Set(window.selectedPests.filter(p => availablePestNames.has(p)));\n\n                const legendItems = pests.map(pest => {\n                    if (!pest || !pest.name) {\n                        return '';\n                    }\n                    // Checkbox status is determined by currentSelections\n                    const isChecked = currentSelections.has(pest.name);\n                    return `\n                        <label>\n                            <input type=\"checkbox\" name=\"pest-filter\" value=\"${pest.name}\" class=\"tw-mr-2 tw-rounded tw-text-blue-600 tw-shadow-sm focus:tw-border-blue-300 focus:tw-ring focus:tw-ring-blue-200 focus:tw-ring-opacity-50\" ${isChecked ? 'checked' : ''}>\n                            <span class=\"tw-mr-2 tw-w-4 tw-h-4 tw-rounded-full tw-inline-block\" style=\"background-color: ${pest.pests_legend_color || '#999'};\"></span>\n                            <span>${pest.name}</span>\n                        </label>\n                    `;\n                }).join('');\n\n                const blendedItems = Object.entries(blendedColors).map(([name, color]) => {\n                    const comboPests = name.split(' + ');\n                    // A blended combination is checked if ALL its component pests are in currentSelections\n                    const isChecked = comboPests.every(p => currentSelections.has(p));\n                    return `\n                        <label>\n                            <input type=\"checkbox\" name=\"blended-filter\" value=\"${name}\" class=\"tw-mr-2 tw-rounded tw-text-blue-600 tw-shadow-sm focus:tw-border-blue-300 focus:tw-ring focus:tw-ring-blue-200 focus:tw-ring-opacity-50\" ${isChecked ? 'checked' : ''}>\n                            <span class=\"tw-mr-2 tw-w-4 tw-h-4 tw-rounded-full tw-inline-block\" style=\"background-color: ${color};\"></span>\n                            <span>${name}</span>\n                        </label>\n                    `;\n                }).join('');\n\n                pestLegend.innerHTML = `\n                    <p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Pest Legend</p>\n                    ${legendItems}\n                    ${blendedItems}\n                `;\n            };\n\n            // Attaches event listeners to the pest legend checkboxes\n            const addPestLegendEventListeners = () => {\n                // Event listeners for individual pest checkboxes\n                const checkboxes = document.querySelectorAll('#pest-legend input[name=\"pest-filter\"]');\n                checkboxes.forEach(checkbox => {\n                    checkbox.addEventListener('change', (e) => {\n                        const pestName = e.target.value;\n                        if (e.target.checked) {\n                            window.selectedPests.push(pestName);\n                        } else {\n                            window.selectedPests = window.selectedPests.filter(p => p !== pestName);\n                        }\n                        // Re-render overlay using the updated global selection list\n                        renderPestOverlay(window.map, window.lastScoutingData, window.lastZonesGeojson);\n                    });\n                });\n\n                // Event listeners for blended combination checkboxes\n                const blendedCheckboxes = document.querySelectorAll('#pest-legend input[name=\"blended-filter\"]');\n                blendedCheckboxes.forEach(checkbox => {\n                    checkbox.addEventListener('change', (e) => {\n                        const blendedNames = e.target.value.split(' + ');\n                        if (e.target.checked) {\n                            // Add all component pests to the selectedPests array\n                            window.selectedPests = [...new Set([...window.selectedPests, ...blendedNames])];\n                        } else {\n                            const pestsToKeep = new Set(window.selectedPests.filter(p => !blendedNames.includes(p)));\n                            const otherBlendedCombinations = [...document.querySelectorAll('#pest-legend input[name=\"blended-filter\"]:checked')]\n                                .filter(cb => cb !== e.target)\n                                .map(cb => cb.value.split(' + '));\n\n                            otherBlendedCombinations.forEach(combo => {\n                                combo.forEach(pest => pestsToKeep.add(pest));\n                            });\n\n                            document.querySelectorAll('#pest-legend input[name=\"pest-filter\"]:checked').forEach(cb => {\n                                pestsToKeep.add(cb.value);\n                            });\n\n                            window.selectedPests = Array.from(pestsToKeep);\n                        }\n                        renderPestOverlay(window.map, window.lastScoutingData, window.lastZonesGeojson);\n                    });\n                });\n            };\n\n            /* ---------------- 3. Data Fetch (FIXED) ---------------- */\n            const fetchAllData = (date) => {\n                // The clearing of pestOverlayLayer is handled inside renderPestOverlay, no need to clear here.\n\n                frappe.call({\n                    method: \"getPanoramaAnalysis\",\n                    args: {\n                        date: date\n                    },\n                    freeze: true,\n                    callback: function (r) {\n                        if (r.data) {\n                            const allData = r.data;\n                            window.lastZoneData = allData;\n                            window.allPests = allData.all_pests_names || [];\n\n                            // FIX: If selectedPests is empty (initial load), select all.\n                            // Otherwise, preserve the current selection state (user filters).\n                            if (window.selectedPests.length === 0) {\n                                window.selectedPests = window.allPests.map(p => p.name);\n                            }\n\n                            // Store data\n                            window.lastScoutingData = allData.scouting_entries;\n                            window.lastZonesGeojson = allData.all_zones_geojson;\n\n                            // Render map elements based on potentially filtered selection\n                            renderZones(allData);\n                            renderPestOverlay(window.map, window.lastScoutingData, window.lastZonesGeojson);\n\n                            // The renderPestOverlay function now calls renderPestLegend with the correct blended colors\n                            // and the checkbox states are handled within renderPestLegend based on window.selectedPests.\n\n                        } else {\n                            console.error('Error fetching all data:', r);\n                        }\n                    }\n                });\n            };\n\n            /* ---------------- 4. Zones with Line Numbers ---------------- */\n            const renderZones = (data) => {\n                if (window.zoneLayer) window.map.removeLayer(window.zoneLayer);\n                if (window.lineIdLabels) {\n                    window.map.removeLayer(window.lineIdLabels);\n                    window.lineIdLabels = null;\n                }\n\n                const lines = {};\n                (data.all_zones_geojson || []).forEach(zone => {\n                    try {\n                        const geoJson = JSON.parse(zone.raw_geojson);\n                        const greenhouseName = zone.name.split(\" - \")[0];\n                        if (geoJson.features) {\n                            geoJson.features.forEach(feature => {\n                                const lineId = feature.properties.line_id;\n                                const uniqueKey = `${greenhouseName}_line_${lineId}`;\n                                feature.properties.zone_name = zone.name;\n                                if (!lines[uniqueKey]) lines[uniqueKey] = [];\n                                lines[uniqueKey].push(feature);\n                            });\n                        }\n                    } catch (e) {\n                        console.error(\"Invalid GeoJSON for zone:\", zone.name, e);\n                    }\n                });\n\n                window.lineIdLabels = L.layerGroup().addTo(window.map);\n\n                Object.keys(lines).forEach(key => {\n                    const lineFeatures = lines[key];\n                    if (lineFeatures.length > 0) {\n                        lineFeatures.sort((a, b) => a.properties.zone_id - b.properties.zone_id);\n                        const allLineCoords = lineFeatures.flatMap(f => f.geometry.coordinates);\n                        const lineId = lineFeatures[0].properties.line_id;\n                        const isOdd = parseInt(lineId) % 2 !== 0;\n\n                        const markerPoint = isOdd\n                            ? allLineCoords[0]\n                            : allLineCoords[allLineCoords.length - 1];\n\n                        const lineIdLabel = L.marker([markerPoint[1], markerPoint[0]], {\n                            icon: L.divIcon({\n                                className: 'line-id-label',\n                                html: `<div class=\"${darkFlavor ? 'tw-text-white' : 'tw-text-black'} tw-text-[7px] tw-font-thin\" style=\"transform: rotate(45deg);\">${lineId}</div>`,\n                                iconSize: [20, 10],\n                                iconAnchor: [0, 0]\n                            })\n                        });\n                        window.lineIdLabels.addLayer(lineIdLabel);\n                    }\n                });\n\n                const allZoneFeatures = {\n                    type: \"FeatureCollection\",\n                    features: Object.values(lines).flat()\n                };\n\n                window.zoneLayer = L.geoJSON(allZoneFeatures, {\n                    style: {\n                        color: darkFlavor ? '#ffffff' : '#000000',\n                        weight: 0.6,\n                        opacity: 0.8\n                    },\n                    onEachFeature: (feature, layer) => {\n                        if (feature.properties && feature.properties.zone_id) {\n                            const zoneName = feature.properties.zone_name || feature.properties.name || \"\";\n                            const parts = zoneName.split(\" - \");\n                            let tooltipHtml = zoneName;\n\n                            if (parts.length >= 4) {\n                                const [gh, kr, bed, zone] = parts;\n                                tooltipHtml = `\n            <div class=\"tw-text-xs tw-leading-tight\">\n              <strong>${gh}</strong><br>\n              ${kr}<br>\n              ${bed}<br>\n              ${zone}\n            </div>\n          `;\n                            }\n\n                            layer.bindTooltip(tooltipHtml, {\n                                permanent: false,\n                                direction: 'top'\n                            });\n                        }\n                    }\n                });\n\n                window.map.on('zoomend', () => {\n                    const z = window.map.getZoom();\n                    if (window.zoneLayer) {\n                        if (z >= 15) {\n                            if (!window.map.hasLayer(window.zoneLayer)) window.zoneLayer.addTo(window.map);\n                        } else {\n                            if (window.map.hasLayer(window.zoneLayer)) window.map.removeLayer(window.zoneLayer);\n                        }\n                    }\n                    if (window.lineIdLabels) {\n                        if (z >= 18) {\n                            if (!window.map.hasLayer(window.lineIdLabels)) window.lineIdLabels.addTo(window.map);\n                        } else {\n                            if (window.map.hasLayer(window.lineIdLabels)) window.map.removeLayer(window.lineIdLabels);\n                        }\n                    }\n                });\n\n                if (window.map.getZoom() >= 15 && window.zoneLayer) {\n                    window.zoneLayer.addTo(window.map);\n                }\n                if (window.map.getZoom() >= 18 && window.lineIdLabels) {\n                    window.lineIdLabels.addTo(window.map);\n                }\n            };\n\n            /* ---------------- 5. Pest Overlay ---------------- */\n            function blendColors(colors) {\n                if (colors.length === 0) return \"#999\";\n                let r = 0,\n                    g = 0,\n                    b = 0;\n                colors.forEach(c => {\n                    const hex = c.replace(\"#\", \"\");\n                    r += parseInt(hex.substring(0, 2), 16);\n                    g += parseInt(hex.substring(2, 4), 16);\n                    b += parseInt(hex.substring(4, 6), 16);\n                });\n                r = Math.round(r / colors.length);\n                g = Math.round(g / colors.length);\n                b = Math.round(b / colors.length);\n                return `rgb(${r},${g},${b})`;\n            }\n\n            function renderPestOverlay(map, scoutingData, zonesGeojson) {\n                if (window.pestOverlayLayer) map.removeLayer(window.pestOverlayLayer);\n\n                const overlayGroup = L.layerGroup();\n                // Filter scouting data using the global selectedPests list\n                const filteredPests = new Set(window.selectedPests);\n                const blendedPestColors = {};\n\n                (zonesGeojson || []).forEach(zone => {\n                    const zoneGeojson = JSON.parse(zone.raw_geojson);\n                    const coords = zoneGeojson.features[0].geometry.coordinates.map(c => [c[1], c[0]]);\n                    const line = turf.lineString(coords.map(c => [c[1], c[0]]));\n\n                    const entries = (scoutingData || []).filter(e => e.zone === zone.name);\n                    if (entries.length === 0) return;\n\n                    const totalLength = turf.length(line, {\n                        units: \"meters\"\n                    });\n                    const segmentLength = totalLength / entries.length;\n\n                    entries.forEach((entry, i) => {\n                        const start = turf.along(line, i * segmentLength, {\n                            units: \"meters\"\n                        });\n                        const end = turf.along(line, (i + 1) * segmentLength, {\n                            units: \"meters\"\n                        });\n\n                        const segmentCoords = [\n                            [start.geometry.coordinates[1], start.geometry.coordinates[0]],\n                            [end.geometry.coordinates[1], end.geometry.coordinates[0]]\n                        ];\n\n                        const relevantPests = (entry.pests_scouting_entry || []).filter(p => filteredPests.has(p.pest));\n                        if (relevantPests.length === 0) return;\n\n                        const colors = relevantPests.map(p => p.color).filter(Boolean);\n                        const blendedColor = blendColors(colors);\n\n                        if (relevantPests.length > 1) {\n                            const uniquePests = new Set(relevantPests.map(p => p.pest));\n                            if (uniquePests.size > 1) {\n                                const pestNames = Array.from(uniquePests).sort().join(\" + \");\n                                blendedPestColors[pestNames] = blendedColor;\n                            }\n                        }\n\n                        const tooltipText = relevantPests.map(p => {\n                            const name = p.pest || \"Unknown\";\n                            const stage = p.symbol ? ` (${p.symbol})` : \"\";\n                            return `${name}${stage}: ${p.count || 0}`;\n                        }).join(\"<br>\");\n\n                        const segment = L.polyline(segmentCoords, {\n                            color: blendedColor,\n                            weight: 4.5,\n                            opacity: 0.9\n                        });\n\n                        segment.bindTooltip(\n                            `<div class=\"tw-text-xs tw-leading-tight\">\n            <strong>${zone.name}</strong><br>\n            ${tooltipText}\n          </div>`, {\n                                sticky: true\n                            }\n                        );\n\n                        segment.addTo(overlayGroup);\n                    });\n                });\n\n                overlayGroup.addTo(map);\n                window.pestOverlayLayer = overlayGroup;\n\n                // FIX: Re-render legend AFTER rendering the overlay to get blended colors\n                renderPestLegend(window.allPests, blendedPestColors);\n                // FIX: Re-add listeners to the newly rendered checkboxes\n                addPestLegendEventListeners();\n            }\n\n            initializeMap();\n        };\n    </script>\n</body>\n\n</html>",
  "main_section_md": null,
  "meta_description": null,
  "meta_image": null,
  "meta_title": null,
  "modified": "2025-10-11 01:19:19.204645",
  "module": "Upande Scp",
  "name": "map",
  "page_blocks": [],
  "published": 1,
  "route": "observations-map",
  "show_sidebar": 0,
  "show_title": 0,
  "slideshow": null,
  "start_date": null,
  "text_align": "Left",
  "title": "Observations Map",
  "website_sidebar": null
 },
 {
  "breadcrumbs": null,
  "content_type": "HTML",
  "context_script": "",
  "css": null,
  "docstatus": 0,
  "doctype": "Web Page",
  "dynamic_route": 0,
  "dynamic_template": 0,
  "enable_comments": 0,
  "end_date": null,
  "full_width": 1,
  "header": null,
  "insert_style": 0,
  "javascript": "document.addEventListener('DOMContentLoaded', function() {\n  const homeLink = document.querySelector('.navbar-brand');\n  if (homeLink) {\n    homeLink.href = \"https://kaitet-group-staging.upande.com/app/scouting-%26-crop-protection\";\n  }\n})",
  "main_section": null,
  "main_section_html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Variety Map</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script>\n        tailwind.config = {\n            prefix: \"tw-\",\n        };\n    </script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        html,\n        body {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            overflow-x: hidden;\n        }\n\n        .main-container {\n            max-width: 100%;\n        }\n\n        #map-page {\n            height: 100vh;\n            width: 100%;\n            position: relative;\n        }\n\n        #map-container,\n        #map {\n            height: 100%;\n            width: 100%;\n        }\n\n        .leaflet-control-layers.leaflet-control-layers-expanded {\n            padding: 6px;\n        }\n\n        .leaflet-control-layers-toggle {\n            display: none;\n        }\n\n        #variety-legend {\n            position: absolute;\n            bottom: 1rem;\n            left: 1rem;\n            z-index: 1000;\n            background: white;\n            padding: 1rem;\n            border-radius: 0.5rem;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);\n            max-height: 50%;\n            overflow-y: auto;\n        }\n\n        #variety-legend label {\n            display: flex;\n            align-items: center;\n            cursor: pointer;\n            margin-bottom: 0.5rem;\n        }\n\n        .line-id-label {\n            font-family: sans-serif;\n            pointer-events: none;\n        }\n\n        .protomaps-legend {\n            background: white;\n            padding: 10px;\n            border-radius: 5px;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);\n            position: absolute;\n            bottom: 3rem;\n            right: 1rem;\n            z-index: 1000;\n            display: none;\n        }\n\n        .protomaps-legend label {\n            display: block;\n            cursor: pointer;\n        }\n\n        .leaflet-top.leaflet-right {\n            margin-top: 4rem !important;\n        }\n    </style>\n</head>\n\n<body class=\"tw-bg-white tw-font-sans\">\n    <div class=\"main-container\">\n        <div id=\"map-page\" class=\"tw-w-full tw-h-full tw-p-0 tw-flex tw-flex-col\">\n            <div id=\"variety-legend\" class=\"tw-bg-white tw-p-4 tw-rounded tw-shadow tw-space-y-2 tw-max-w-xs\">\n                <p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Varieties</p>\n            </div>\n            <div id=\"map-container\" class=\"tw-w-full tw-flex-grow\">\n                <div id=\"map\" class=\"tw-w-full tw-h-full\"></div>\n            </div>\n        </div>\n    </div>\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-providers/1.13.0/leaflet-providers.min.js\"></script>\n    <script src=\"https://unpkg.com/@turf/turf@6/turf.min.js\"></script>\n    <script src=\"https://unpkg.com/protomaps-leaflet@5.0.0/dist/protomaps-leaflet.js\"></script>\n    <script src=\"/assets/frappe/js/frappe-web.min.js\"></script>\n    <script>\n        window.onload = function () {\n            /* ---------------- 1. Globals ---------------- */\n            window.map = null;\n            let mapInitialized = false;\n            window.zoneLayer = null;\n            window.lineIdLabels = null;\n            let protomapsLayer = null;\n            let layersControl = null;\n            let darkFlavor = false;\n            window.lastVarietiesData = null;\n            const varietyPalette = ['#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722'];\n\n            /* ---------------- 2. Init Map ---------------- */\n            const initializeMap = () => {\n                if (mapInitialized) return;\n                window.map = L.map('map', {\n                    zoomSnap: 0.1,\n                    zoomDelta: 0.1,\n                    maxZoom: 22.4,\n                    zoomControl: false\n                });\n                mapInitialized = true;\n                renderBaseLayers();\n                window.map.setView([0.0692, 35.7565], 18);\n                fetchBedsAndZones();\n            };\n\n            const renderBaseLayers = () => {\n                const googleSatelliteLayer = L.tileLayer(\n                    'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', { maxZoom: 25 }\n                );\n                const openStreetMapLayer = L.tileLayer(\n                    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 25 }\n                );\n                const osmSateliteLayer = L.tileLayer(\n                    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', { maxZoom: 25 }\n                );\n                const pmtilesUrl = 'https://res.cloudinary.com/dorft5vxy/raw/upload/v1757410567/eldama-ravine_gdtrsv.pmtiles';\n                protomapsLayer = protomapsL.leafletLayer({\n                    url: pmtilesUrl,\n                    flavor: \"light\",\n                    attribution: \"© Protomaps © OpenStreetMap\"\n                });\n                protomapsLayer.addTo(window.map);\n                const baseMaps = {\n                    \"Satellite View\": googleSatelliteLayer,\n                    \"Street Map\": openStreetMapLayer,\n                    \"OSM Satelite\": osmSateliteLayer,\n                    \"Protomaps Layer\": protomapsLayer\n                };\n                layersControl = L.control.layers(baseMaps, {}, { collapsed: false, position: 'topright' }).addTo(window.map);\n                const ProtomapsLegendControl = L.Control.extend({\n                    onAdd: function (map) {\n                        const div = L.DomUtil.create('div', 'protomaps-legend');\n                        div.innerHTML = `\n                            <p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Map Flavor</p>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"light\" checked> Light</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"dark\"> Dark</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"white\"> White</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"grayscale\"> Grayscale</label>\n                            <label><input type=\"radio\" name=\"flavor\" value=\"black\"> Black</label>\n                        `;\n                        L.DomEvent.on(div, 'change', (e) => {\n                            if (e.target.name === 'flavor') {\n                                const newFlavor = e.target.value;\n                                darkFlavor = newFlavor === \"dark\" || newFlavor === \"black\";\n                                if (window.map.hasLayer(protomapsLayer)) {\n                                    window.map.removeLayer(protomapsLayer);\n                                    layersControl.removeLayer(protomapsLayer);\n                                }\n                                protomapsLayer = protomapsL.leafletLayer({\n                                    url: pmtilesUrl,\n                                    flavor: newFlavor,\n                                    attribution: \"© Protomaps © OpenStreetMap\"\n                                });\n                                protomapsLayer.addTo(window.map);\n                                layersControl.addBaseLayer(protomapsLayer, \"Protomaps Layer\");\n\n                                if (window.lastVarietiesData) {\n                                    renderAllVarieties(window.lastVarietiesData);\n                                }\n                            }\n                        });\n                        return div;\n                    }\n                });\n                const protomapsLegend = new ProtomapsLegendControl({ position: 'bottomright' }).addTo(window.map);\n                window.map.on('baselayerchange', function (e) {\n                    if (e.name === \"Protomaps Layer\") {\n                        protomapsLegend.getContainer().style.display = 'block';\n                    } else {\n                        protomapsLegend.getContainer().style.display = 'none';\n                    }\n                });\n            };\n\n            const generateVarietyColors = (varieties) => {\n                const varietyColors = {};\n                varieties.forEach((variety, index) => {\n                    varietyColors[variety.variety] = varietyPalette[index % varietyPalette.length];\n                });\n                return varietyColors;\n            };\n\n            const renderVarietyLegend = (varietyColors) => {\n                const varietyLegend = document.getElementById('variety-legend');\n                varietyLegend.innerHTML = '<p class=\"tw-text-sm tw-font-semibold tw-mb-1\">Varieties</p>';\n                Object.keys(varietyColors).forEach(varietyName => {\n                    const color = varietyColors[varietyName];\n                    const legendItem = document.createElement('div');\n                    legendItem.className = 'tw-flex tw-items-center tw-space-x-2';\n                    legendItem.innerHTML = `\n                        <span class=\"tw-w-3 tw-h-3 tw-rounded-full tw-inline-block\" style=\"background-color: ${color};\"></span>\n                        <label class=\"tw-text-sm tw-text-gray-700\">${varietyName}</label>\n                    `;\n                    varietyLegend.appendChild(legendItem);\n                });\n            };\n\n            /* ---------------- 3. Data Fetch ---------------- */\n            const fetchBedsAndZones = () => {\n                frappe.call({\n                    method: \"getBedsAndZones\",\n                    freeze: true,\n                    callback: function (r) {\n                        if (r.data && Array.isArray(r.data)) {\n                            window.lastVarietiesData = r.data;\n                            renderAllVarieties(r.data);\n                        } else {\n                            console.error('No varieties data found in the response or invalid data format.');\n                        }\n                    }\n                });\n            };\n\n            /* ---------------- 4. Updated rendering function ---------------- */\n            const renderAllVarieties = (varietiesData) => {\n                if (window.zoneLayer) window.map.removeLayer(window.zoneLayer);\n                if (window.lineIdLabels) {\n                    window.map.removeLayer(window.lineIdLabels);\n                    window.lineIdLabels = null;\n                }\n\n                const varietyColors = generateVarietyColors(varietiesData);\n                renderVarietyLegend(varietyColors);\n\n                const lines = {};\n                const allZoneFeatures = {\n                    type: \"FeatureCollection\",\n                    features: []\n                };\n\n                varietiesData.forEach(varietyItem => {\n                    const varietyName = varietyItem.variety;\n                    const color = varietyColors[varietyName];\n                    \n                    (varietyItem.beds || []).forEach(bed => {\n                        (bed.zones || []).forEach(zone => {\n                            try {\n                                const geoJson = JSON.parse(zone.raw_geojson);\n                                if (geoJson.features && Array.isArray(geoJson.features)) {\n                                    geoJson.features.forEach(feature => {\n                                        const lineId = feature.properties.line_id;\n                                        const greenhouseName = zone.name.split(\" - \")[0];\n                                        const uniqueKey = `${greenhouseName}_${varietyName}_line_${lineId}`;\n                                        feature.properties.zone_name = zone.name;\n                                        feature.properties.variety = varietyName;\n                                        feature.properties.color = color;\n\n                                        if (!lines[uniqueKey]) lines[uniqueKey] = [];\n                                        lines[uniqueKey].push(feature);\n                                    });\n                                }\n                            } catch (e) {\n                                console.error(\"Invalid GeoJSON for zone:\", zone.name, e);\n                            }\n                        });\n                    });\n                });\n\n                window.lineIdLabels = L.layerGroup();\n\n                Object.keys(lines).forEach(key => {\n                    const lineFeatures = lines[key];\n                    if (lineFeatures.length > 0) {\n                        lineFeatures.sort((a, b) => a.properties.zone_id - b.properties.zone_id);\n                        const allLineCoords = lineFeatures.flatMap(f => f.geometry.coordinates);\n                        const lineId = lineFeatures[0].properties.line_id;\n                        const isOdd = parseInt(lineId) % 2 !== 0;\n                        const markerPoint = isOdd\n                            ? allLineCoords[0]\n                            : allLineCoords[allLineCoords.length - 1];\n                        const lineIdLabel = L.marker([markerPoint[1], markerPoint[0]], {\n                            icon: L.divIcon({\n                                className: 'line-id-label',\n                                html: `<div class=\"${darkFlavor ? 'tw-text-white' : 'tw-text-black'} tw-text-[7px] tw-font-thin\" style=\"transform: rotate(45deg);\">${lineId}</div>`,\n                                iconSize: [20, 10],\n                                iconAnchor: [0, 0]\n                            })\n                        });\n                        window.lineIdLabels.addLayer(lineIdLabel);\n                    }\n                });\n\n                allZoneFeatures.features = Object.values(lines).flat();\n\n                window.zoneLayer = L.geoJSON(allZoneFeatures, {\n                    style: (feature) => {\n                        return {\n                            color: feature.properties.color || '#000000',\n                            weight: 0.6,\n                            opacity: 0.8\n                        };\n                    },\n                    onEachFeature: (feature, layer) => {\n                        if (feature.properties && feature.properties.zone_id) {\n                            const zoneName = feature.properties.zone_name || feature.properties.name || \"\";\n                            const variety = feature.properties.variety || \"N/A\";\n                            const parts = zoneName.split(\" - \");\n                            let tooltipHtml = `<strong>Variety:</strong> ${variety}<br>`;\n                            if (parts.length >= 4) {\n                                const [gh, kr, bed, zone] = parts;\n                                tooltipHtml += `\n                                <div class=\"tw-text-xs tw-leading-tight\">\n                                    <strong>${gh}</strong><br>\n                                    ${kr}<br>\n                                    ${bed}<br>\n                                    ${zone}\n                                </div>\n                                `;\n                            } else {\n                                tooltipHtml += zoneName;\n                            }\n                            layer.bindTooltip(tooltipHtml, { permanent: false, direction: 'top' });\n                        }\n                    }\n                });\n\n                window.map.on('zoomend', () => {\n                    const z = window.map.getZoom();\n                    if (window.zoneLayer) {\n                        if (z >= 15) {\n                            if (!window.map.hasLayer(window.zoneLayer)) window.zoneLayer.addTo(window.map);\n                        } else {\n                            if (window.map.hasLayer(window.zoneLayer)) window.map.removeLayer(window.zoneLayer);\n                        }\n                    }\n                    if (window.lineIdLabels) {\n                        if (z >= 18) {\n                            if (!window.map.hasLayer(window.lineIdLabels)) window.lineIdLabels.addTo(window.map);\n                        } else {\n                            if (window.map.hasLayer(window.lineIdLabels)) window.map.removeLayer(window.lineIdLabels);\n                        }\n                    }\n                });\n\n                // Initial check for layers based on the starting zoom level\n                if (window.map.getZoom() >= 15 && window.zoneLayer) {\n                    window.zoneLayer.addTo(window.map);\n                }\n                if (window.map.getZoom() >= 18 && window.lineIdLabels) {\n                    window.lineIdLabels.addTo(window.map);\n                }\n            };\n            initializeMap();\n        };\n    </script>\n</body>\n\n</html>",
  "main_section_md": null,
  "meta_description": null,
  "meta_image": null,
  "meta_title": null,
  "modified": "2025-10-11 01:18:56.240151",
  "module": "Upande Scp",
  "name": "variety-map",
  "page_blocks": [],
  "published": 1,
  "route": "variety-map",
  "show_sidebar": 0,
  "show_title": 0,
  "slideshow": null,
  "start_date": null,
  "text_align": "Left",
  "title": "Variety Map",
  "website_sidebar": null
 }
]